{"version":3,"file":"FCombobox.2a76966d.js","sources":["../../src/components/LCombobox/LCombobox.ts","../../src/components/ui/FCombobox.vue"],"sourcesContent":["import {\n  computed,\n  defineComponent,\n  h,\n  inject,\n  nextTick,\n  onMounted,\n  provide,\n  ref,\n  withModifiers,\n  type ComputedRef,\n  type InjectionKey,\n  type PropType,\n  type Ref,\n  type WritableComputedRef,\n  onUnmounted,\n  watch,\n  type HTMLAttributes,\n} from \"vue\";\nimport type { IField } from \"@/components/LForm\";\nimport { useId } from \"@/composable/useId\";\n\nexport interface IComobobox {\n  after?: boolean;\n  autofocus?: boolean;\n  description?: string;\n  disabled?: boolean;\n  id: string;\n  items: (string | number)[];\n  keyLabel?: string;\n  keyValue?: string;\n  keyFilter?: string;\n  label?: string;\n  multiple?: boolean;\n  name: string;\n  placeholder?: string;\n}\n\nconst isPrintableCharacter = (str: string) => {\n  return str.length === 1 && str.match(/\\S| /);\n};\n\n// export const IGeneralPropsFormElement = {\n//   after: {\n//     type: Boolean,\n//     default: false,\n//     required: false,\n//   },\n//   autofocus: {\n//     type: Boolean,\n//     default: false,\n//     required: false,\n//   },\n//   description: {\n//     type: String,\n//     default: \"\",\n//     required: false,\n//   },\n//   disabled: {\n//     type: Boolean,\n//     default: false,\n//     required: false,\n//   },\n//   id: {\n//     type: String,\n//     required: true,\n//   },\n//   items: {\n//     type: Array,\n//     default: () => {\n//       return [];\n//     },\n//     required: true,\n//   },\n//   keyLabel: {\n//     type: String,\n//     default: \"id\",\n//     required: false,\n//   },\n//   keyValue: {\n//     type: String,\n//     default: \"id\",\n//     required: false,\n//   },\n//   keyFilter: {\n//     type: String,\n//     default: \"id\",\n//     required: false,\n//   },\n//   label: {\n//     type: String,\n//     default: \"\",\n//     required: false,\n//   },\n//   multiple: {\n//     type: Boolean,\n//     default: false,\n//     required: false,\n//   },\n//   name: {\n//     type: String,\n//     default: \"name\",\n//     required: false,\n//   },\n//   placeholder: {\n//     type: String,\n//     default: \"placeholder\",\n//     required: false,\n//   },\n//   // autocomplete?: string;\n//   // co?: string;\n//   // component?: string;\n//   // group?: string;\n//   // multi?: boolean;\n//   // rules?: {\n//   //   type: string;\n//   //   params: any[];\n//   // }[];\n//   // size?: number;\n//   // type?: string;\n//   // vtype?: string;\n// };\n\nexport type TOption =\n  | {\n      [key: string]: string | number;\n    }\n  | string\n  | number;\nexport type TComboboxModel = number | string | [];\nexport type StateComboboxDefinition = {\n  // State\n  comboboxNode: Ref<HTMLFormElement | null>;\n  buttonNode?: Ref<HTMLFormElement | null>;\n  listboxNode: Ref<HTMLFormElement | null>;\n\n  comboboxHasVisualFocus: Ref<boolean>;\n  listboxHasVisualFocus: Ref<boolean>;\n  hasHover: Ref<boolean>;\n\n  focusOption: Ref<number>;\n\n  isNone: Ref<boolean>;\n  isList: Ref<boolean>;\n  isBoth: Ref<boolean>;\n\n  allOptions: Ref<{ index: string; key: string; el: HTMLElement | null }[]>;\n\n  option: Ref<TOption | null>;\n  // firstOption: Ref<TOption | null>;\n  // lastOption: Ref<TOption | null>;\n\n  filteredOptions: Ref<(TOption | null)[]>;\n  filter: Ref<string>;\n  filterText: Ref<string>;\n\n  model: WritableComputedRef<TComboboxModel[]>;\n\n  autocomplete: ComputedRef<string>;\n\n  field: Ref<IField>;\n\n  isBusy: Ref<boolean>;\n  isDisabled: ComputedRef<boolean>;\n  isOpen: Ref<boolean>;\n\n  hasOptions: ComputedRef<boolean>;\n\n  open: () => void;\n  close: (e?: Event | undefined, force?: boolean) => void;\n  registerOverlay: () => void;\n  unRegisterOverlay: () => void;\n  onChangeActiveIndex: (event: KeyboardEvent, index?: number) => number;\n  onSetFocusOption: () => void;\n  onChooseOption: (option: TOption, flag?: boolean) => void;\n  onFilterOptions: (flag?: boolean) => TOption[];\n  onSetValue: () => void;\n};\n\nexport const ComboboxContext = Symbol(\n  \"ComboboxContext\"\n) as InjectionKey<StateComboboxDefinition>;\n\nexport const LCombobox = defineComponent({\n  props: {\n    modelValue: {\n      type: [Array, String, Number] as PropType<TComboboxModel>,\n      default: () => {\n        return [];\n      },\n    },\n    field: {\n      type: Object as PropType<IField>,\n      required: true,\n      default: () => {\n        return {};\n      },\n    },\n    error: {\n      type: String,\n      default: \"\",\n    },\n    showList: {\n      type: Boolean,\n      default: false,\n    },\n    // ...IGeneralPropsFormElement,\n  },\n  emits: [\n    \"update:showList\",\n    \"update:modelValue\",\n    \"onLoadItems\",\n    \"onInput\",\n    \"onChoose\",\n  ],\n  setup(props, { slots, emit }) {\n    const autocomplete = computed<\n      StateComboboxDefinition[\"autocomplete\"][\"value\"]\n    >(() => props.field?.autocomplete || \"none\");\n    const isNone = ref<StateComboboxDefinition[\"isNone\"][\"value\"]>(false);\n    const isList = ref<StateComboboxDefinition[\"isList\"][\"value\"]>(false);\n    const isBoth = ref<StateComboboxDefinition[\"isBoth\"][\"value\"]>(false);\n    const field = ref<StateComboboxDefinition[\"field\"][\"value\"]>(props.field);\n\n    const focusOption =\n      ref<StateComboboxDefinition[\"focusOption\"][\"value\"]>(-1);\n    const hasOptions = computed<StateComboboxDefinition[\"hasOptions\"][\"value\"]>(\n      () => filteredOptions.value.length > 0 // focusOption.value > 0\n    );\n    const option = ref<StateComboboxDefinition[\"option\"][\"value\"]>(null);\n    const isOpen = ref<StateComboboxDefinition[\"isOpen\"][\"value\"]>(false);\n    const hasHover = ref<StateComboboxDefinition[\"hasHover\"][\"value\"]>(false);\n    const isBusy = ref<StateComboboxDefinition[\"isBusy\"][\"value\"]>(false);\n    const isDisabled = computed<StateComboboxDefinition[\"isDisabled\"][\"value\"]>(\n      () => field.value?.disabled || isBusy.value || false\n    );\n\n    const comboboxHasVisualFocus =\n      ref<StateComboboxDefinition[\"comboboxHasVisualFocus\"][\"value\"]>(false);\n    const listboxHasVisualFocus =\n      ref<StateComboboxDefinition[\"listboxHasVisualFocus\"][\"value\"]>(false);\n\n    const comboboxNode =\n      ref<StateComboboxDefinition[\"comboboxNode\"][\"value\"]>(null);\n    const listboxNode =\n      ref<StateComboboxDefinition[\"listboxNode\"][\"value\"]>(null);\n\n    const allOptions = ref<StateComboboxDefinition[\"allOptions\"][\"value\"]>([]);\n\n    const model = computed<StateComboboxDefinition[\"model\"][\"value\"]>({\n      get() {\n        return props.field.multiple && Array.isArray(props.modelValue)\n          ? [...props.modelValue]\n          : [props.modelValue];\n      },\n      set(value) {\n        const newValue = field.value.multiple ? value : value[0];\n        emit(\"update:modelValue\", newValue), emit(\"onInput\", newValue);\n      },\n    });\n\n    const filter = ref<StateComboboxDefinition[\"filter\"][\"value\"]>(\"\");\n    const filterText = ref<StateComboboxDefinition[\"filterText\"][\"value\"]>(\"\");\n    const filteredOptions = ref<\n      StateComboboxDefinition[\"filteredOptions\"][\"value\"]\n    >([]);\n\n    const onFilterOptions = (flag?: boolean) => {\n      console.time(\"onFilterOptions\");\n\n      if (typeof flag !== \"boolean\") {\n        flag = false;\n      }\n\n      // let _option = null;\n      // let _currentOption = combobox.option.value;\n      const _filter = filter.value.toLowerCase();\n\n      let _filteredOptions: TOption[] = [];\n      const _keyFilter = field.value.keyFilter;\n      const _allOptions = field.value.items || [];\n      // this.listboxNode.innerHTML = '';\n\n      // do not filter any options if autocomplete is none\n      if ((isNone.value || filter.value.length === 0) && !flag) {\n        // filter.value = \"\";\n        _filteredOptions = _allOptions;\n      } else {\n        if (_keyFilter) {\n          _filteredOptions = _allOptions\n            .filter((x: any) =>\n              typeof x == \"object\"\n                ? x[_keyFilter].toLowerCase().indexOf(_filter) === 0\n                : false\n            )\n            .sort(\n              (a: any, b: any) =>\n                combobox.model.value.indexOf(a[_keyFilter]) -\n                combobox.model.value.indexOf(b[_keyFilter])\n            );\n        } else {\n          _filteredOptions = _allOptions.filter((x) =>\n            typeof x == \"string\" ? x.toLowerCase().indexOf(_filter) === 0 : \"\"\n          );\n        }\n      }\n\n      // const allOptions = field.value.items || [];\n      // let result: TOption[] = allOptions;\n      // if (keyFilter) {\n      //   result = allOptions\n      //     .filter((x) =>\n      //       typeof x == \"object\"\n      //         ? x[keyFilter]\n      //             .toLowerCase()\n      //             .indexOf(filterText.value.toLowerCase()) !== -1\n      //         : typeof x == \"number\"\n      //         ? x !== -1\n      //         : x.toLowerCase().indexOf(filterText.value.toLowerCase()) !== -1\n      //     )\n      //     .sort(\n      //       (a: any, b: any) =>\n      //         combobox.model.value.indexOf(a[keyFilter]) -\n      //         combobox.model.value.indexOf(b[keyFilter])\n      //     );\n      // }\n      filteredOptions.value = _filteredOptions;\n      console.timeEnd(\"onFilterOptions\");\n\n      return _filteredOptions;\n    };\n\n    watch(\n      () => props.field.items,\n      () => {\n        onFilterOptions();\n      }\n    );\n\n    if (field.value.autocomplete) {\n      if (typeof field.value.autocomplete === \"string\") {\n        const auto = field.value.autocomplete.toLowerCase();\n        isNone.value = auto === \"none\";\n        isList.value = auto === \"list\";\n        isBoth.value = auto === \"both\";\n      } else {\n        // default value of autocomplete\n        isNone.value = true;\n      }\n    }\n\n    const open = () => {\n      isOpen.value = true;\n      // onChooseFirstSelectedOption();\n\n      setTimeout(() => {\n        registerOverlay();\n      }, 10);\n      nextTick(() => {\n        if (!combobox.isNone.value) {\n          comboboxNode.value?.setSelectionRange(\n            0,\n            combobox.filter.value.length\n          );\n        }\n      });\n      // this.buttonNode.setAttribute('aria-expanded', 'true');\n    };\n\n    const close = (e: Event | undefined, force?: boolean) => {\n      if (typeof force !== \"boolean\") {\n        force = false;\n      }\n      if (!e) return;\n      const el = e.target as HTMLInputElement | null;\n      // if (\n      //   !force ||\n      //   combobox.listboxNode.value?.contains(el) ||\n      //   combobox.comboboxNode.value == el\n      // ) {\n      //   return;\n      // }\n      if (\n        force ||\n        (!combobox.listboxNode.value?.contains(el) &&\n          combobox.comboboxNode.value != el)\n      ) {\n        unRegisterOverlay();\n        // this.setCurrentOptionStyle(false);\n        isOpen.value = false;\n        // this.buttonNode.setAttribute(\"aria-expanded\", \"false\");\n        // this.setActiveDescendant(false);\n        comboboxNode.value?.focus();\n        combobox.focusOption.value = -1;\n        if (!field.value.multiple) {\n          nextTick(() => {\n            if (!combobox.isNone.value) {\n              comboboxNode.value?.setSelectionRange(\n                combobox.filter.value.length,\n                combobox.filter.value.length\n              );\n            }\n          });\n        }\n      }\n    };\n\n    const unRegisterOverlay = () => {\n      if (document) {\n        document.removeEventListener(\"click\", close);\n        document.removeEventListener(\"keyup\", close);\n      }\n    };\n\n    const registerOverlay = () => {\n      if (document) {\n        document.addEventListener(\"click\", close);\n        document.addEventListener(\"keyup\", close);\n      }\n    };\n\n    const onChangeActiveIndex = (e: KeyboardEvent, index?: number) => {\n      let newIndex = combobox.focusOption.value || 0;\n\n      if (index || index === 0) {\n        newIndex = index;\n      } else {\n        // if (combobox.focusOption.value == -1) {\n        //   newIndex = 0;\n        // }\n        if (e.key === \"ArrowDown\") {\n          newIndex++;\n          // e.preventDefault();\n        } else if (e.key === \"ArrowUp\") {\n          newIndex--;\n          // e.preventDefault();\n        }\n        if (newIndex > combobox.allOptions.value.length - 1) {\n          newIndex = combobox.allOptions.value.length - 1;\n        }\n        if (newIndex < 0) {\n          newIndex = 0;\n        }\n      }\n      combobox.focusOption.value = newIndex;\n      return newIndex;\n    };\n\n    // const onChooseFirstSelectedOption = () => {\n    //   const keyValue = combobox.field.value.keyValue;\n    //   const firstValue = combobox.field.value.multiple\n    //     ? combobox.model.value[0]\n    //     : combobox.model.value;\n\n    //   let index = combobox.filteredOptions.value.findIndex((x) =>\n    //     keyValue && typeof x == \"object\"\n    //       ? x[keyValue] == firstValue\n    //       : x == firstValue\n    //   );\n    //   if (index == -1) {\n    //     combobox.focusOption.value = 0;\n    //     index = 0;\n    //   } else {\n    //     combobox.focusOption.value = index;\n    //   }\n    //   return index;\n    // };\n\n    const onSetFocusOption = () => {\n      // if (!combobox.focusOption.value) {\n      //   combobox.focusOption.value = 0;\n      // }\n      const keyValue = combobox.field.value.keyValue;\n      nextTick(() => {\n        const value =\n          combobox.filteredOptions.value[combobox.focusOption.value];\n        if (!value) {\n          // value = combobox.filteredOptions.value[0];\n          return;\n        }\n        const elForFocus = combobox.allOptions.value.find(\n          (x) =>\n            x.index ===\n            (keyValue && typeof value == \"object\" ? value[keyValue] : value)\n        );\n        if (elForFocus?.el) {\n          //  && !select.searchEl.value\n          elForFocus.el?.focus();\n        }\n\n        // model.value = [keyValue ? value[keyValue] : value];\n      });\n    };\n\n    /**\n     * Choose option.\n     * @param option object | string | number\n     */\n    const onChooseOption = (option: TOption, flag: boolean) => {\n      if (typeof flag !== \"boolean\") {\n        flag = false;\n      }\n      const value: any =\n        combobox.field.value.keyValue && typeof option == \"object\"\n          ? option[combobox.field.value.keyValue]\n          : option;\n      emit(\"onChoose\", value);\n      const index = combobox.model.value.findIndex((x: any) => x === value);\n      let newValue = [...combobox.model.value];\n      if (combobox.field.value.multiple) {\n        if (index !== -1) {\n          newValue.splice(index, 1);\n        } else {\n          newValue.push(value);\n        }\n        combobox.filter.value = `${value}`;\n      } else {\n        newValue = [value];\n        combobox.filter.value = `${value}`;\n      }\n      if (!isNone.value) {\n        nextTick(() => {\n          if (flag) {\n            combobox.comboboxNode.value?.setSelectionRange(\n              0,\n              combobox.filter.value.length\n            );\n          } else {\n            combobox.comboboxNode.value?.setSelectionRange(\n              combobox.filterText.value.length,\n              combobox.filter.value.length\n            );\n          }\n        });\n      }\n      // combobox.model.value = newValue;\n\n      // if (!combobox.field.value.multiple) {\n\n      //   // combobox.filterText.value = value;\n      // }\n    };\n\n    const onSetValue = () => {\n      // const _keyValue = combobox.field.value.keyValue;\n      // console.group(\"onSetValue\");\n      if (field.value.multiple) {\n        const newValue: TComboboxModel[] = [...combobox.model.value];\n        const indexExists = combobox.model.value.findIndex(\n          (x) => x == combobox.filter.value\n        );\n        if (indexExists != -1) {\n          newValue.splice(indexExists, 1);\n        } else {\n          newValue.push(combobox.filter.value);\n        }\n        combobox.model.value = newValue;\n        filter.value = \"\";\n      } else {\n        combobox.model.value = [combobox.filter.value];\n      }\n      combobox.onFilterOptions();\n      console.groupEnd();\n    };\n\n    const combobox = {\n      autocomplete,\n      isNone,\n      isBoth,\n      isList,\n      field,\n\n      comboboxNode,\n      listboxNode,\n\n      focusOption,\n      hasOptions,\n\n      filter,\n      filterText,\n\n      option,\n      allOptions,\n      filteredOptions,\n\n      model,\n\n      comboboxHasVisualFocus,\n      listboxHasVisualFocus,\n      hasHover,\n\n      isOpen,\n      isBusy,\n      isDisabled,\n      open,\n      close,\n      registerOverlay,\n      unRegisterOverlay,\n      onChangeActiveIndex,\n      onSetFocusOption,\n      onChooseOption,\n      onFilterOptions,\n      onSetValue,\n    };\n\n    const loadData = async () => {\n      isBusy.value = true;\n      await emit(\"onLoadItems\");\n      isBusy.value = false;\n    };\n\n    onMounted(async () => {\n      await loadData();\n      nextTick(() => {\n        if (field.value.autofocus) {\n          combobox.comboboxNode.value?.focus();\n        }\n      });\n      await onFilterOptions();\n    });\n\n    provide(ComboboxContext, combobox);\n\n    return () =>\n      h(\"div\", null, {\n        default: () =>\n          slots.default\n            ? slots.default({\n                // combobox,\n                isNone: isNone.value,\n                isOpen: isOpen.value,\n                isBusy: isBusy.value,\n              })\n            : [],\n      });\n  },\n});\n\nexport const LComboboxInput = defineComponent({\n  name: \"LComboboxInput\",\n  setup(props, { slots }) {\n    const combobox = inject(ComboboxContext);\n    if (!combobox) {\n      console.info(\"LComboboxInput must be nested to LCombobox component\");\n      return;\n    }\n\n    // const query = ref(\"\");\n    const searchDebounce = ref<ReturnType<typeof setTimeout> | null>(null);\n    const onSearch = () => {\n      combobox.filterText.value = combobox.filter.value;\n      // select.onLoadItems({ text: newValue.value })\n      combobox.isBusy.value = false;\n      combobox.focusOption.value = -1;\n      !combobox.isOpen.value && combobox.open();\n      combobox.onFilterOptions();\n      nextTick(() => {\n        if (combobox.isBoth.value) {\n          const addOption = combobox.filteredOptions.value[0];\n          if (addOption && combobox.filterText.value.length) {\n            combobox.onChooseOption(addOption);\n            // !combobox.field.value.multiple && combobox.close(e, true);\n          }\n        }\n      });\n      // combobox.comboboxNode.value?.setSelectionRange(\n      //   combobox.filterText.value.length - 1,\n      //   combobox.filterText.value.length\n      // );\n    };\n\n    // if (combobox.field.value.autocomplete) {\n    watch(\n      () => combobox.model.value,\n      (val) => {\n        if (combobox.isBoth.value && !combobox.field.value?.multiple) {\n          combobox.filter.value = `${val[0]}`;\n        }\n      }\n    );\n    // }\n\n    const aria = computed(() => {\n      const aria: HTMLAttributes = {};\n      // aria[\"aria-controls\"] = `${combobox.field.value.name}-listbox`;\n      if (combobox.allOptions.value[combobox.focusOption.value]) {\n        aria[\"aria-activedescendant\"] = `${\n          combobox.allOptions.value[combobox.focusOption.value]?.key\n        }`;\n      }\n      return aria;\n    });\n\n    return () =>\n      h(\n        \"input\",\n        {\n          ref: combobox.comboboxNode,\n          id: combobox.field.value.id,\n          value: combobox.filter.value,\n          type: \"text\",\n          name: combobox.field.value.id,\n          role: \"combobox\",\n          tabindex: 0,\n          placeholder: combobox.field.value.placeholder,\n          \"aria-autocomplete\": combobox.autocomplete.value,\n          \"aria-expanded\": combobox.isOpen.value,\n          \"aria-controls\": `${combobox.field.value.name}-listbox`,\n          ...aria.value,\n          onInput: (e: KeyboardEvent) => {\n            const el = e.target as HTMLInputElement;\n            if (searchDebounce.value) clearTimeout(searchDebounce.value);\n            combobox.isBusy.value = true;\n            combobox.filter.value = el.value;\n            searchDebounce.value = setTimeout(() => onSearch(), 500);\n          },\n          onClick: withModifiers(\n            (e: MouseEvent) => {\n              if (combobox.isOpen.value) {\n                combobox.close(e, true);\n              } else {\n                combobox.open();\n              }\n            },\n            [\"stop\"]\n          ),\n          onKeydown: withModifiers((e: KeyboardEvent) => {\n            let flag = false;\n            const altKey = e.altKey;\n            switch (e.key) {\n              case \"Enter\":\n                if (combobox.isOpen.value && combobox.focusOption.value != -1) {\n                  const addOption =\n                    combobox.filteredOptions.value[combobox.focusOption.value];\n                  if (addOption) {\n                    combobox.onChooseOption(addOption, true);\n                    // !combobox.field.value.multiple && combobox.close(e, true);\n                    combobox.onSetValue();\n                  }\n                  if (!combobox.field.value.multiple) {\n                    combobox.close(e, true);\n                    combobox.onFilterOptions(true);\n                  }\n                }\n                combobox.filterText.value = \"\";\n                // if (this.listboxHasVisualFocus) {\n                //   this.setValue(this.option.textContent);\n                // }\n                // this.close(true);\n                // this.setVisualFocusCombobox();\n                flag = true;\n                break;\n              case \"ArrowDown\":\n              case \"Down\":\n                if (combobox.hasOptions) {\n                  if (altKey) {\n                    !combobox.isOpen.value && combobox.open();\n                  } else {\n                    !combobox.isOpen.value && combobox.open();\n                    combobox.onChangeActiveIndex(e);\n                    const currentOption =\n                      combobox.filteredOptions.value[\n                        combobox.focusOption.value\n                      ];\n                    if (currentOption && combobox.isBoth.value) {\n                      combobox.onChooseOption(currentOption, true);\n                    }\n                    combobox.onSetFocusOption();\n                    nextTick(() => {\n                      combobox.comboboxNode.value?.focus();\n                      combobox.filterText.value = \"\";\n                    });\n                    // if (\n                    //   this.listboxHasVisualFocus ||\n                    //   (this.isBoth && this.filteredOptions.length > 1)\n                    // ) {\n                    //   this.setOption(this.getNextOption(this.option), true);\n                    //   this.setVisualFocusListbox();\n                    // } else {\n                    //   this.setOption(this.firstOption, true);\n                    //   this.setVisualFocusListbox();\n                    // }\n                  }\n                }\n                flag = true;\n                break;\n              case \"Up\":\n              case \"ArrowUp\":\n                if (combobox.hasOptions) {\n                  if (altKey) {\n                    combobox.open();\n                  } else {\n                    if (!combobox.isOpen.value) {\n                      combobox.open();\n                      combobox.onChangeActiveIndex(\n                        e,\n                        combobox.filteredOptions.value.length - 1\n                      );\n                    } else {\n                      combobox.onChangeActiveIndex(e);\n                    }\n                    combobox.onSetFocusOption();\n                    const currentOption =\n                      combobox.filteredOptions.value[\n                        combobox.focusOption.value\n                      ];\n                    if (currentOption && combobox.isBoth.value) {\n                      combobox.onChooseOption(currentOption);\n                    }\n                    nextTick(() => {\n                      combobox.comboboxNode.value?.focus();\n                      combobox.filterText.value = \"\";\n                    });\n                    // if (this.listboxHasVisualFocus) {\n                    //   this.setOption(this.getPreviousOption(this.option), true);\n                    // } else {\n                    //   this.open();\n                    //   if (!altKey) {\n                    //     this.setOption(this.lastOption, true);\n                    //     this.setVisualFocusListbox();\n                    //   }\n                    // }\n                  }\n                }\n                flag = true;\n                break;\n              case \"Esc\":\n              case \"Escape\":\n                if (combobox.isOpen.value) {\n                  combobox.close(e, true);\n                  // this.setVisualFocusCombobox();\n                  combobox.comboboxNode.value?.setSelectionRange(\n                    combobox.filter.value.length,\n                    combobox.filter.value.length\n                  );\n                } else {\n                  combobox.model.value = [];\n                  combobox.filter.value = \"\";\n                  combobox.filterText.value = \"\";\n                  // this.setValue('');\n                  // this.comboboxNode.value = '';\n                }\n                // combobox.unRegisterOverlay();\n                // combobox.option.value = null;\n                combobox.onFilterOptions(true);\n                flag = true;\n                break;\n              case \"Tab\":\n                combobox.close(e, true);\n                // this.close(true);\n                // if (this.listboxHasVisualFocus) {\n                //   if (this.option) {\n                //     this.setValue(this.option.textContent);\n                //   }\n                // }\n                // break;\n                break;\n              case \"Home\":\n                combobox.comboboxNode.value?.setSelectionRange(0, 0);\n                flag = true;\n                break;\n              case \"End\":\n                combobox.comboboxNode.value?.setSelectionRange(\n                  combobox.filter.value.length,\n                  combobox.filter.value.length\n                );\n                // var length = this.comboboxNode.value.length;\n                // this.comboboxNode.setSelectionRange(length, length);\n                flag = true;\n                break;\n              default:\n                break;\n            }\n\n            if (flag) {\n              e.stopPropagation();\n              e.preventDefault();\n            }\n          }, []),\n          onKeyup: withModifiers((e: KeyboardEvent) => {\n            let flag = false;\n            // option = null;\n            const char = e.key;\n\n            // if (isPrintableCharacter(char)) {\n            //   combobox.filter.value += char;\n            // }\n            // console.log(\n            //   \".......\",\n            //   combobox.filterText.value,\n            //   combobox.filter.value\n            // );\n\n            // this is for the case when a selection in the textbox has been deleted\n            // if (\n            //   combobox.filterText.value.length < combobox.filter.value.length\n            // ) {\n            //   combobox.filterText.value = combobox.filter.value;\n            //   combobox.option.value = null;\n            //   combobox.onFilterOptions();\n            //   // this.filterOptions();\n            // }\n\n            if (e.key === \"Escape\" || e.key === \"Esc\") {\n              return;\n            }\n\n            switch (e.key) {\n              case \"Backspace\":\n                // this.setVisualFocusCombobox();\n                // this.setCurrentOptionStyle(false);\n                // combobox.filterText.value = combobox.filter.value;\n                // combobox.option.value = null;\n                // this.filterOptions();\n                combobox.onFilterOptions();\n                flag = true;\n                break;\n\n              case \"Left\":\n              case \"ArrowLeft\":\n              case \"Right\":\n              case \"ArrowRight\":\n              case \"Home\":\n              case \"End\":\n                if (combobox.isBoth.value) {\n                  // combobox.filterText.value = combobox.filter.value;\n                } else {\n                  // combobox.option.value = null;\n                  // this.setCurrentOptionStyle(false);\n                }\n                // this.setVisualFocusCombobox();\n                // flag = true;\n                break;\n\n              default:\n                if (isPrintableCharacter(char)) {\n                  // this.setVisualFocusCombobox();\n                  // this.setCurrentOptionStyle(false);\n                  flag = true;\n\n                  // if (combobox.isList.value || combobox.isBoth.value) {\n                  //   option = this.filterOptions();\n                  //   if (option) {\n                  //     if (this.isClosed() && this.comboboxNode.value.length) {\n                  //       this.open();\n                  //     }\n\n                  //     if (\n                  //       this.getLowercaseContent(option).indexOf(\n                  //         this.comboboxNode.value.toLowerCase()\n                  //       ) === 0\n                  //     ) {\n                  //       this.option = option;\n                  //       if (this.isBoth || this.listboxHasVisualFocus) {\n                  //         this.setCurrentOptionStyle(option);\n                  //         if (this.isBoth) {\n                  //           this.setOption(option);\n                  //         }\n                  //       }\n                  //     } else {\n                  //       this.option = null;\n                  //       this.setCurrentOptionStyle(false);\n                  //     }\n                  //   } else {\n                  //     this.close();\n                  //     this.option = null;\n                  //     this.setActiveDescendant(false);\n                  //   }\n                  // } else if (this.comboboxNode.value.length) {\n                  //   this.open();\n                  // }\n                }\n                break;\n            }\n\n            if (flag) {\n              e.stopPropagation();\n              e.preventDefault();\n            }\n          }, []),\n          onFocus: () => {\n            // combobox.filterText.value = combobox.filter.value;\n            // this.filterOptions();\n            // combobox.onFilterOptions();\n            // this.setVisualFocusCombobox();\n            // combobox.option.value = null;\n            // this.setCurrentOptionStyle(null);\n          },\n          onBlur: () => {\n            // this.removeVisualFocusAll();\n          },\n        },\n        slots.default ? slots.default({}) : []\n      );\n  },\n});\n\nexport const LComboboxButton = defineComponent({\n  name: \"LComboboxButton\",\n  setup(props, { slots }) {\n    const combobox = inject(ComboboxContext);\n    if (!combobox) {\n      console.info(\"LComboboxButton must be nested to LCombobox component\");\n      return;\n    }\n\n    // const onSearch = () => {\n    //   combobox.filterText.value = combobox.filter.value;\n    //   combobox.isBusy.value = false;\n    //   combobox.focusOption.value = -1;\n    //   !combobox.isOpen.value && combobox.open();\n    //   combobox.allOptions.value.findIndex((x) =>\n    //     x[combobox.field.value.keyValue]\n    //       .toLowerCase()\n    //       .startsWith(combobox.filter.value)\n    //   );\n    //   nextTick(() => {\n    //     if (combobox.isBoth.value) {\n    //       const addOption = combobox.filteredOptions.value[0];\n    //       if (addOption && combobox.filterText.value.length) {\n    //         combobox.onChooseOption(addOption);\n    //         // !combobox.field.value.multiple && combobox.close(e, true);\n    //       }\n    //     }\n    //   });\n    // };\n\n    return () =>\n      h(\n        \"div\",\n        {\n          ref: combobox.comboboxNode,\n          id: combobox.field.value.id,\n          name: combobox.field.value.id,\n          role: \"combobox\",\n          tabindex: 0,\n          \"aria-labelledby\": `${combobox.field.value.id}_label`,\n          \"aria-expanded\": combobox.isOpen.value,\n          \"aria-controls\": `${combobox.field.value.name}-listbox`,\n          \"aria-activedescendant\": `${\n            combobox.allOptions.value[combobox.focusOption.value]?.key || \"\"\n          }`,\n          onClick: withModifiers((e: MouseEvent) => {\n            if (combobox.isOpen.value) {\n              combobox.close(e, true);\n            } else {\n              combobox.open();\n            }\n          }, []),\n          onKeydown: withModifiers((e: KeyboardEvent) => {\n            let flag = false;\n            const altKey = e.altKey;\n            switch (e.key) {\n              case \"Enter\":\n                if (combobox.isOpen.value && combobox.focusOption.value != -1) {\n                  const addOption =\n                    combobox.filteredOptions.value[combobox.focusOption.value];\n                  if (addOption) {\n                    combobox.onChooseOption(addOption, true);\n                    // !combobox.field.value.multiple && combobox.close(e, true);\n                    combobox.onSetValue();\n                  }\n                  if (!combobox.field.value.multiple) {\n                    combobox.close(e, true);\n                    // combobox.onFilterOptions(true);\n                  }\n                }\n                // combobox.filterText.value = \"\";\n                flag = true;\n                break;\n              case \"ArrowDown\":\n              case \"Down\":\n                if (combobox.hasOptions) {\n                  if (altKey) {\n                    !combobox.isOpen.value && combobox.open();\n                  } else {\n                    if (!combobox.isOpen.value) {\n                      combobox.open();\n                      if (combobox.focusOption.value <= 0) {\n                        combobox.focusOption.value = 0;\n                      }\n                      combobox.onChangeActiveIndex(\n                        e,\n                        combobox.focusOption.value\n                      );\n                    } else {\n                      combobox.onChangeActiveIndex(e);\n                    }\n                    // const currentOption =\n                    //   combobox.filteredOptions.value[\n                    //     combobox.focusOption.value\n                    //   ];\n                    // if (currentOption && combobox.isBoth.value) {\n                    //   combobox.onChooseOption(currentOption, true);\n                    // }\n                    combobox.onSetFocusOption();\n                    nextTick(() => {\n                      combobox.comboboxNode.value?.focus();\n                      // combobox.filterText.value = \"\";\n                    });\n                  }\n                }\n                flag = true;\n                break;\n              case \"Up\":\n              case \"ArrowUp\":\n                if (combobox.hasOptions) {\n                  if (altKey) {\n                    combobox.open();\n                  } else {\n                    if (!combobox.isOpen.value) {\n                      combobox.open();\n                      if (combobox.focusOption.value <= 0) {\n                        combobox.focusOption.value =\n                          combobox.filteredOptions.value.length - 1;\n                      }\n                      combobox.onChangeActiveIndex(\n                        e,\n                        combobox.focusOption.value\n                      );\n                    } else {\n                      combobox.onChangeActiveIndex(e);\n                    }\n                    combobox.onSetFocusOption();\n                    // const currentOption =\n                    //   combobox.filteredOptions.value[\n                    //     combobox.focusOption.value\n                    //   ];\n                    // if (currentOption && combobox.isBoth.value) {\n                    //   combobox.onChooseOption(currentOption);\n                    // }\n                    nextTick(() => {\n                      combobox.comboboxNode.value?.focus();\n                      combobox.filterText.value = \"\";\n                    });\n                    // if (this.listboxHasVisualFocus) {\n                    //   this.setOption(this.getPreviousOption(this.option), true);\n                    // } else {\n                    //   this.open();\n                    //   if (!altKey) {\n                    //     this.setOption(this.lastOption, true);\n                    //     this.setVisualFocusListbox();\n                    //   }\n                    // }\n                  }\n                }\n                flag = true;\n                break;\n              case \"Esc\":\n              case \"Escape\":\n                if (combobox.isOpen.value) {\n                  combobox.close(e, true);\n                } else {\n                  combobox.model.value = [];\n                  combobox.filter.value = \"\";\n                  combobox.filterText.value = \"\";\n                }\n                // combobox.onFilterOptions(true);\n                flag = true;\n                break;\n              case \"Tab\":\n                combobox.close(e, true);\n                break;\n              case \"Home\":\n                flag = true;\n                break;\n              case \"End\":\n                flag = true;\n                break;\n              default:\n                break;\n            }\n\n            if (flag) {\n              e.stopPropagation();\n              e.preventDefault();\n            }\n          }, []),\n        },\n        slots.default ? slots.default({}) : []\n      );\n  },\n});\n\nexport const LComboboxOptions = defineComponent({\n  name: \"LComboboxOptions\",\n  props: {\n    as: {\n      type: String,\n      default: \"ul\",\n    },\n  },\n  setup(props, { slots }) {\n    const combobox = inject(ComboboxContext);\n    if (!combobox) {\n      console.info(\"LComboboxOptions must be nested to LCombobox component\");\n      return;\n    }\n\n    return () =>\n      h(\n        props.as,\n        {\n          ref: combobox.listboxNode,\n          id: `${combobox.field.value.id}-listbox`,\n          role: \"listbox\",\n          \"aria-labelledby\": `${combobox.field.value.id}`,\n          // tabindex: 0,\n          // ...aria.value,\n          onKeydown: withModifiers((e: KeyboardEvent) => {}, [\"stop\"]),\n          onPointerup: () => {},\n          onPointerover: () => {\n            combobox.hasHover.value = true;\n          },\n          onPointerout: () => {\n            combobox.hasHover.value = false;\n          },\n        },\n        slots.default\n          ? slots.default({\n              // groups: select?.groups.value,\n              options: combobox.filteredOptions.value, // select.schema.value.items,\n              hasOptions: combobox.hasOptions.value,\n            })\n          : []\n      );\n  },\n});\n\nexport const LComboboxOption = defineComponent({\n  props: {\n    as: {\n      type: String,\n      default: \"li\",\n    },\n    value: {\n      type: [String, Number, Object],\n      default: \"\",\n    },\n  },\n  name: \"LComboboxOption\",\n  setup(props, { slots }) {\n    const combobox = inject(ComboboxContext);\n    if (!combobox) {\n      console.info(\n        \"LComboboxOption must be nested to LComboboxOptions component\"\n      );\n      return;\n    }\n\n    const currentOption = ref<HTMLElement | null>(null);\n\n    const id = useId();\n    const indexKey = computed(() =>\n      combobox.field.value.keyValue && typeof props.value == \"object\"\n        ? props.value[combobox.field.value.keyValue]\n        : props.value\n    );\n\n    const selected = computed(() => {\n      return combobox.model.value.includes(\n        combobox.field.value.keyValue && typeof props.value == \"object\"\n          ? props.value[combobox.field.value.keyValue]\n          : props.value\n      );\n    });\n\n    const hovered = computed(() => {\n      const keyValue = combobox.field.value.keyValue;\n      const value = combobox.filteredOptions.value[combobox.focusOption.value];\n      let isHovered = false;\n      if (value) {\n        isHovered =\n          (keyValue && typeof props.value == \"object\"\n            ? props.value[keyValue]\n            : props.value) ==\n          (keyValue && typeof value == \"object\" ? value[keyValue] : value);\n      }\n      return isHovered;\n      // select.model.value.includes(\n      //   select.field.value.keyValue\n      //     ? props.value[select.field.value.keyValue]\n      //     : props.value\n      // );\n    });\n\n    onMounted(() => {\n      combobox.allOptions.value.push({\n        index: indexKey.value,\n        key: `${combobox.field.value.id}-option-${id}`,\n        el: currentOption.value,\n      });\n    });\n\n    const index = computed(() =>\n      combobox?.allOptions.value.findIndex((x) => x.key == indexKey.value)\n    );\n\n    onUnmounted(() => {\n      // delete select.optionsElement.value[key.value];\n      combobox?.allOptions.value.splice(index.value, 1);\n    });\n\n    return () =>\n      h(\n        props.as,\n        {\n          ref: currentOption,\n          id: `${combobox.field.value.id}-option-${id}`,\n          role: \"option\",\n          \"aria-disabled\": false,\n          tabindex: -1,\n          \"aria-selected\": selected.value === true ? selected.value : undefined,\n          // ...aria.value,\n          onKeydown: withModifiers(\n            (e: KeyboardEvent) => {\n              // switch (e.key) {\n              //   case \"Enter\":\n              //     combobox.onChooseOption(props.value);\n              //     // if (this.listboxHasVisualFocus) {\n              //     //   this.setValue(this.option.textContent);\n              //     // }\n              //     // this.close(true);\n              //     // this.setVisualFocusCombobox();\n              //     break;\n              // }\n              // if (searchDebounce.value) clearTimeout(searchDebounce.value);\n              // // onSearch(e.key);\n              // searchDebounce.value = setTimeout(\n              //   () => select.clearSearchQuery(),\n              //   350\n              // );\n              // // select all options\n              // if (e.ctrlKey && e.key === \"a\") {\n              //   toggleChooseAll();\n              //   e.preventDefault();\n              // }\n              // if (e.key === \"Escape\") {\n              //   select.focusOption.value = -1;\n              //   select.show.value = false;\n              //   select.selectButtonEl.value.focus({ preventScroll: true });\n              //   return;\n              // }\n              // change index active option.\n              // const newIndex = select.onChangeActiveIndex(e);\n              // e.preventDefault();\n              // if (newIndex !== select.focusOption.value) {\n              //   // set focus by index element from selected elements.\n              //   select.focusOption.value = newIndex;\n              //   // select.filteredOptions.value[newIndex]?.focus();\n              //   const keyValue = select.field.value.keyValue;\n              //   const value = select.filteredOptions.value[newIndex];\n              //   const elForFocus = select.optionsEl.value.find(\n              //     (x) => x.key == (keyValue ? value[keyValue] : value)\n              //   );\n              //   console.log(\n              //     \"focus option = \",\n              //     newIndex,\n              //     select.optionsEl.value\n              //   );\n              //   if (elForFocus) {\n              //     //  && !select.searchEl.value\n              //     elForFocus.el?.focus();\n              //     // console.log(\"focus index option = \", newIndex, elForFocus.el);\n              //   } else {\n              //     // select.searchEl.value?.focus();\n              //   }\n              //   // select.optionsEl[newIndex].value?.focus();\n              // }\n              // if (!e.shiftKey) {\n              //   select.indexShiftFrom.value = newIndex;\n              // }\n              // if (\n              //   e.shiftKey &&\n              //   (e.key === \"ArrowDown\" || e.key === \"ArrowUp\")\n              // ) {\n              //   select.indexShiftTo.value = select.focusOption.value;\n              //   select.chooseItemsOfRange({\n              //     range: {\n              //       from: select.indexShiftFrom.value,\n              //       to: select.indexShiftTo.value,\n              //     },\n              //   });\n              //   // select.indexShiftFrom.value =\n              //   //   select.indexShiftFrom.value || select.focusOption.value\n              //   // console.group('onKeyDown')\n              //   // console.log(\n              //   //   'select.focusOption.value=',\n              //   //   select.focusOption.value\n              //   // )\n              //   // console.log('From =', select.indexShiftFrom.value)\n              //   // console.log('To =', select.indexShiftTo.value)\n              //   // console.groupEnd()\n              // }\n            },\n            [\"stop\"]\n          ),\n          onPointerup: () => {\n            // if (\n            //   !this.comboboxNode.contains(event.target) &&\n            //   !this.listboxNode.contains(event.target) &&\n            //   !this.buttonNode.contains(event.target)\n            // ) {\n            //   this.comboboxHasVisualFocus = false;\n            //   this.setCurrentOptionStyle(null);\n            //   this.removeVisualFocusAll();\n            //   setTimeout(this.close.bind(this, true), 300);\n            // }\n          },\n          onPointerover: () => {\n            combobox.hasHover.value = true;\n          },\n          onPointerout: () => {\n            combobox.hasHover.value = false;\n            // setTimeout(this.close.bind(this, false), 300);\n          },\n          onClick: withModifiers(\n            (e: MouseEvent) => {\n              combobox.onChooseOption(props.value);\n\n              combobox.onSetValue();\n              if (!combobox.field.value?.multiple) {\n                combobox.close(e, true);\n              }\n              if (!combobox.isNone) {\n                combobox.onFilterOptions(true);\n              }\n              nextTick(() => {\n                combobox.comboboxNode.value?.focus();\n              });\n            },\n            [\"stop\"]\n          ),\n          // onKeyup: (e: KeyboardEvent) => {\n          //   if (e.key === \"Shift\") {\n          //     select.pressShift.value = false;\n          //     select.indexShiftFrom.value = 0;\n          //     select.indexShiftTo.value = 0;\n          //   }\n          // },\n          // onFocus: () => {\n          // },\n        },\n        slots.default\n          ? slots.default({\n              selected: selected.value,\n              hovered: hovered.value,\n            })\n          : combobox.field.value.keyValue && typeof props.value == \"object\"\n          ? props.value[combobox.field.value.keyValue]\n          : props.value\n      );\n  },\n});\n","<script lang=\"ts\">\nimport { defineComponent } from \"vue\";\nexport default defineComponent({\n  name: \"FCombobox\",\n  inheritAttrs: false,\n});\n</script>\n<script lang=\"ts\" setup>\nimport { computed, ref } from \"vue\";\nimport type { IField } from \"@/components/LForm\";\n\nimport {\n  LCombobox,\n  LComboboxInput,\n  LComboboxButton,\n  LComboboxOptions,\n  LComboboxOption,\n  type TComboboxModel,\n} from \"@/components/LCombobox\";\n\nimport { iChevronDown, iCheck } from \"@/stories/composable/useIcon\";\n\nimport { LSpinner } from \"@/components/LSpinner\";\nimport { LIcon } from \"@/components/LIcon\";\nimport { ripple } from \"@/directives/ripple\";\n\nconst vRipple = ripple;\n\nconst props = withDefaults(\n  defineProps<{\n    /**\n     * modelValue - model string\n     */\n    modelValue: TComboboxModel;\n    error?: string;\n    /**\n     * Schema for field.\n     */\n    field: IField;\n    required?: boolean;\n  }>(),\n  {\n    // modelValue: () => [],\n  }\n);\n\nconst emit = defineEmits([\n  \"update:modelValue\",\n  \"onInput\",\n  \"onLoadItems\",\n  \"onChoose\",\n]);\n\nconst model = computed<TComboboxModel>({\n  get() {\n    return props.modelValue;\n  },\n  set(value) {\n    emit(\"update:modelValue\", value);\n  },\n});\n\nconst empty = computed<boolean>(() => {\n  let empty = true;\n  switch (typeof model.value) {\n    case \"string\":\n      empty = model.value == \"\";\n      break;\n    case \"number\":\n      empty = model.value == 0;\n      break;\n    default:\n      if (Array.isArray(model.value)) {\n        empty = model.value.length == 0;\n      }\n      break;\n  }\n  return empty;\n});\n\nconst inputElement = ref<InstanceType<typeof LComboboxInput> | null>(null);\n\nconst onSetFocus = () => {\n  const el = inputElement.value?.$el;\n  if (el) el.focus();\n};\n\nconst onReset = async () => {\n  let newValue: TComboboxModel = 0;\n  switch (typeof model.value) {\n    case \"string\":\n      newValue = \"\";\n      break;\n    default:\n      newValue = [];\n      break;\n  }\n  model.value = newValue;\n  await emit(\"onInput\");\n  await onSetFocus();\n};\n\nconst showList = ref(false);\n</script>\n<template>\n  <slot\n    name=\"label\"\n    :id=\"field.id\"\n    :required=\"required\"\n    :onSetFocus=\"onSetFocus\"\n  ></slot>\n  <div\n    class=\"flex items-center cursor-pointer\"\n    :class=\"[\n      'rounded-md border text-base transition w-full appearance-none outline-none focus-within:ring-1 hover:ring-1  bg-white dark:bg-s-900',\n      {\n        'border-d-500 dark:border-d-500 focus-within:ring-d-500 focus-within:border-d-500 hover:ring-d-500':\n          error,\n      },\n      showList ? '' : '',\n      {\n        'border-s-200 dark:border-s-600 focus-within:ring-p-500 focus-within:border-p-500 hover:ring-p-500 hover:border-p-500':\n          !error,\n      },\n    ]\"\n  >\n    <slot name=\"before\"></slot>\n    <LCombobox\n      v-bind=\"$attrs\"\n      v-model=\"model\"\n      v-model:show-list=\"showList\"\n      :field=\"field\"\n      :error=\"error\"\n      class=\"relative flex-auto\"\n      #default=\"{ isOpen, isBusy, isNone }\"\n      @on-load-items=\"$emit('onLoadItems')\"\n      @on-input=\"$emit('onInput', $event)\"\n      @on-choose=\"$emit('onChoose', $event)\"\n    >\n      <div\n        :class=\"['outline-none flex space-x-2 items-center w-full transition']\"\n      >\n        <div class=\"flex-auto flex flex-wrap m-1\">\n          <LComboboxButton\n            v-if=\"isNone\"\n            ref=\"inputElement\"\n            autocomplete=\"off\"\n            class=\"w-full px-2 py-1 outline-none bg-transparent\"\n          >\n            <div v-if=\"model\">\n              {{ model }}\n            </div>\n            <div v-else class=\"text-s-400\">\n              {{ field.placeholder }}\n            </div>\n          </LComboboxButton>\n          <template v-else>\n            <div\n              v-if=\"typeof model == 'object' && field.multiple\"\n              class=\"flex flex-row flex-wrap\"\n            >\n              <div\n                v-for=\"(item, index) in model\"\n                :key=\"index\"\n                class=\"px-2 bg-s-300 dark:bg-s-700 rounded-md mr-1 mb-1\"\n              >\n                {{ item }}\n              </div>\n            </div>\n            <LComboboxInput\n              ref=\"inputElement\"\n              autocomplete=\"off\"\n              class=\"w-full px-2 py-1 cursor-text outline-none bg-transparent placeholder-s-400\"\n            ></LComboboxInput>\n          </template>\n        </div>\n        <div class=\"py-2 pr-2\">\n          <LSpinner v-if=\"isBusy\" />\n          <LIcon\n            v-else\n            :class=\"['transition-transform', { 'rotate-180': isOpen }]\"\n          >\n            {{ iChevronDown }}\n          </LIcon>\n        </div>\n        <div class=\"absolute right-8 top-0 h-full flex items-center\">\n          <slot name=\"after\" :on-reset=\"onReset\" :empty=\"empty\"></slot>\n        </div>\n      </div>\n\n      <div\n        v-show=\"isOpen\"\n        class=\"z-10 mt-1.5 transition overflow-hidden shadow-2xl outline-none border border-s-200 dark:border-s-700 rounded-md absolute top-full left-0 right-0 bg-white dark:bg-s-800\"\n        :class=\"[\n          isOpen ? 'block' : 'hidden',\n          error ? '' : '',\n          {\n            'border-d-500 dark:border-d-500 focus-within:ring-d-500 focus-within:border-d-500':\n              error,\n          },\n          showList ? '' : '',\n          {\n            'border-s-200 dark:border-s-600 focus-within:ring-p-500 focus-within:border-p-500':\n              !error,\n          },\n        ]\"\n      >\n        <LComboboxOptions\n          #default=\"{ options, hasOptions }\"\n          class=\"max-h-64 b-scroll overflow-y-auto\"\n        >\n          <template v-if=\"hasOptions\">\n            <LComboboxOption\n              v-for=\"option of options\"\n              :key=\"field.keyValue ? option[field.keyValue] : option\"\n              :value=\"option\"\n              class=\"group relative overflow-hidden\"\n              #default=\"{ selected, hovered }\"\n            >\n              <slot name=\"option\" :option=\"option\" :selected=\"selected\">\n                <div\n                  v-ripple=\"{}\"\n                  :class=\"[\n                    'flex p-2 items-center cursor-pointer focus:outline-none',\n                    hovered\n                      ? 'bg-p-200 dark:bg-p-800 text-black dark:text-white group-focus:bg-p-200 group-hover:bg-p-200 dark:group-hover:bg-p-800 dark:group-focus:bg-p-800'\n                      : 'bg-transparent text-black dark:text-white group-focus:bg-p-100 group-hover:bg-p-100 dark:group-hover:bg-p-900 dark:group-focus:bg-p-900',\n                  ]\"\n                >\n                  <div :class=\"['flex items-center h-6 w-6 mr-2']\">\n                    <LIcon\n                      v-if=\"selected\"\n                      :class=\"[\n                        'text-xl',\n                        {\n                          'text-p-500 dark:text-p-500': selected,\n                        },\n                      ]\"\n                    >\n                      {{ iCheck }}\n                    </LIcon>\n                  </div>\n                  {{ field.keyLabel ? option[field.keyLabel] : option }}\n                </div>\n              </slot>\n            </LComboboxOption>\n          </template>\n          <template v-else>\n            <div class=\"p-2\">None options</div>\n          </template>\n        </LComboboxOptions>\n      </div>\n    </LCombobox>\n  </div>\n  <slot v-if=\"error\" name=\"error\" :error=\"error\"></slot>\n  <slot name=\"description\"></slot>\n</template>\n"],"names":["isPrintableCharacter","__name","str","ComboboxContext","LCombobox","defineComponent","props","slots","emit","autocomplete","computed","_a","isNone","ref","isList","isBoth","field","focusOption","hasOptions","filteredOptions","option","isOpen","hasHover","isBusy","isDisabled","comboboxHasVisualFocus","listboxHasVisualFocus","comboboxNode","listboxNode","allOptions","model","value","newValue","filter","filterText","onFilterOptions","flag","_filter","_filteredOptions","_keyFilter","_allOptions","x","a","b","combobox","watch","auto","open","registerOverlay","nextTick","close","e","force","el","unRegisterOverlay","_b","index","newIndex","keyValue","elForFocus","indexExists","loadData","onMounted","provide","h","LComboboxInput","inject","searchDebounce","onSearch","addOption","val","aria","withModifiers","altKey","currentOption","_c","char","LComboboxButton","LComboboxOptions","LComboboxOption","id","useId","indexKey","selected","hovered","isHovered","onUnmounted","__default__","vRipple","ripple","empty","inputElement","onSetFocus","onReset","showList"],"mappings":"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"}