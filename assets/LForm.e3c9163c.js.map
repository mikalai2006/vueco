{"version":3,"file":"LForm.e3c9163c.js","sources":["../../src/components/LSpinner/LSpinner.ts","../../src/components/LForm/LForm.ts"],"sourcesContent":["import { h, defineComponent, resolveComponent } from \"vue\";\nimport { LIcon } from \"@/components/LIcon\";\n\nexport default defineComponent({\n  name: \"LSpinner\",\n  components: {\n    LIcon,\n  },\n  setup: (_, { slots }) => {\n    const LIcon: any = resolveComponent(\"LIcon\");\n\n    return () => {\n      return h(\n        LIcon,\n        {\n          class: \"animate-spin\",\n        },\n        () =>\n          slots.default\n            ? slots\n                .default()\n                .map((n) => n.children)\n                .join(\"\")\n            : \"M8 3a5 5 0 1 0 4.546 2.914.5.5 0 0 1 .908-.417A6 6 0 1 1 8 2v1z M8 4.466V.534a.25.25 0 0 1 .41-.192l2.36 1.966c.12.1.12.284 0 .384L8.41 4.658A.25.25 0 0 1 8 4.466z\"\n      );\n    };\n  },\n});\n","import {\n  h,\n  ref,\n  defineComponent,\n  provide,\n  computed,\n  inject,\n  withModifiers,\n} from \"vue\";\n\nimport type { Ref, InjectionKey, PropType, ComputedRef } from \"vue\";\n\n// enum EError {\n//   \"noLForm\" = \"LFormGroup must be use in LForm component!\",\n// }\n\nexport interface ErrorValidate {\n  errors: [];\n  inner: [];\n  message: string;\n  name: string;\n  params: {\n    path: string;\n    value: string;\n    originalValue: string;\n    label: string | undefined;\n  };\n  path: string;\n  type: string;\n  value: any;\n}\n\nexport type TItem = {\n  id: string | number;\n  name: string;\n  [key: string]: any;\n};\n\nexport type IField = {\n  after?: any;\n  autocomplete?: string;\n  autofocus?: boolean;\n  co?: string;\n  component?: string;\n  description?: string;\n  disabled?: boolean;\n  id: string | number;\n  items?: Array<TItem | string | number>;\n  group?: string;\n  keyLabel?: string;\n  keyValue?: string;\n  keyGroup?: string;\n  keyFilter?: string;\n  label?: string;\n  multiple?: boolean;\n  multi?: boolean;\n  name: string;\n  placeholder?: string;\n  rules?: {\n    type: string;\n    params: any[];\n  }[];\n  size?: number;\n  type?: string;\n  vtype?: string;\n};\n\nexport type StateFieldDefinition = {\n  // State\n  name?: string; // Ref<string | null>\n  // el: Ref<HTMLFormElement | null>;\n  // validate: Ref<boolean | null>\n  error?: Ref<string | null>;\n  model?: string | number | { [key: string]: any } | any[] | boolean; // Ref<any | null>\n\n  // labelledby: Ref<string | undefined>\n  // describedby: Ref<string | undefined>\n};\n\nexport type StateFormDefinition = {\n  // State\n  formEl: Ref<HTMLFormElement | null>;\n  fields: { [key: string]: StateFieldDefinition };\n  formModel: Ref<{ [key: string]: any }>;\n  errors: Ref<{ [key: string]: string }>;\n  validateForm: ComputedRef<boolean>;\n  schema: Ref<IField[]>;\n  // onValidate: (fieldName: string) => void\n};\n\nexport const FormContext = Symbol(\n  \"FormContext\"\n) as InjectionKey<StateFormDefinition>;\n\nexport const LForm = defineComponent({\n  name: \"LForm\",\n  props: {\n    modelValue: {\n      type: [Object],\n      required: true,\n      default: () => {\n        return {};\n      },\n    },\n    schema: {\n      type: Array as PropType<IField[]>,\n      required: true,\n      default: () => {\n        return [];\n      },\n    },\n    immediate: {\n      type: [Boolean],\n      default: false,\n    },\n    id: {\n      type: [String],\n      default: \"form\",\n    },\n    errors: {\n      type: Object as PropType<{ [key: string]: string }>,\n      default: () => {\n        return {};\n      },\n    },\n  },\n  emits: [\n    \"update:modelValue\",\n    \"onSaveForm\",\n    \"onCheckValidate\",\n    \"afterValidate\",\n  ],\n  setup(props, { emit, slots }) {\n    const formEl = ref<StateFormDefinition[\"formEl\"][\"value\"]>(null);\n    // const fields = ref<StateFormDefinition[\"fields\"]>({});\n    const formModel = ref<StateFormDefinition[\"formModel\"][\"value\"]>(\n      props.modelValue\n    );\n    const schema = ref<StateFormDefinition[\"schema\"][\"value\"]>(\n      props.schema || []\n    );\n    const errors = ref<{ [key: string]: string }>(props.errors);\n    const validateForm = computed<StateFormDefinition[\"validateForm\"][\"value\"]>(\n      () =>\n        props.errors?.value\n          ? Object.keys(props.errors.value).length === 0\n          : false\n    );\n    const form = {\n      formEl,\n      formModel,\n      // fields,\n      errors,\n      validateForm,\n      schema,\n      // onValidate,\n    };\n    provide(FormContext, form);\n\n    // const onCheckValidate = async () => {\n    //   await loginFormSchema\n    //     .validate(props.modelValue, { abortEarly: false })\n    //     // .then(() => { })\n    //     .catch((err) => {\n    //       err.inner.forEach((error: any) => {\n    //         errors.value = { ...errors.value, [error.path]: error.message }\n    //       })\n    //     })\n    //   emit('afterValidate', form.errors.value, props.id)\n    // }\n\n    // const onSave = async () => {\n    //   await onCheckValidate()\n    //   if (validateForm.value) emit('onSaveForm', props.modelValue)\n    // }\n    const onResetForm = async () => {\n      emit(\"update:modelValue\", {});\n    };\n\n    // if (props.immediate) onCheckValidate()\n    // return () => {\n    //   return h(\n    //     'form',\n    //     {},\n    //     slots.default\n    //       ? slots.default({\n    //           form,\n    //           errors,\n    //           onValidate,\n    //         })\n    //       : []\n    //   )\n    // }\n    // return {\n    //   form,\n    //   formEl,\n    //   // errors: errorsA,\n    //   // onValidate,\n    //   // onSave,\n    //   // onCheckValidate,\n    //   onResetForm,\n    // };\n\n    return () =>\n      h(\n        \"form\",\n        {\n          ref: form.formEl,\n        },\n        {\n          default: () => {\n            const children = slots.default\n              ? slots.default({\n                  form,\n                  errors,\n                  validateForm: form.validateForm.value,\n                  // onCheckValidate: this.onCheckValidate,\n                  // onSave: this.onSave,\n                  onResetForm,\n                })\n              : [];\n            return children;\n          },\n        }\n      );\n  },\n  // render() {\n  //   return h(\n  //     \"form\",\n  //     {\n  //       ref: this.form.formEl,\n  //     },\n  //     {\n  //       default: () => {\n  //         const children = this.$slots.default\n  //           ? this.$slots.default({\n  //               form: this.form,\n  //               errors: this.errors,\n  //               validateForm: this.form.validateForm.value,\n  //               // onCheckValidate: this.onCheckValidate,\n  //               // onSave: this.onSave,\n  //               onResetForm: this.onResetForm,\n  //             })\n  //           : [];\n  //         return children;\n  //       },\n  //     }\n  //   );\n  // },\n});\n\nexport const FormFieldContext = Symbol(\n  \"ElemsContext\"\n) as InjectionKey<StateFieldDefinition>;\n\n// export const LFormGroup = defineComponent({\n//   name: \"LFormGroup\",\n//   props: {\n//     // modelValue: {\n//     //   type: [String, Number, Object, Array, Boolean],\n//     //   required: true,\n//     //   default: '',\n//     // },\n//     field: {\n//       type: Object as PropType<IField>,\n//       required: true,\n//       default: () => {\n//         return {};\n//       },\n//     },\n//     // error: {\n//     //   type: String,\n//     //   default: '',\n//     // },\n//   },\n//   // emits: ['update:modelValue'],\n//   setup(props, { slots }) {\n//     const form = inject(FormContext, null);\n//     // const fieldEl = ref<StateFieldDefinition[\"el\"][\"value\"]>(null);\n\n//     if (form) {\n//       // form.fields[props.field.name] = {\n//       //   el: fieldEl,\n//       //   name: props.field.name,\n//       //   // model: props.modelValue,\n//       // };\n//     } else {\n//       console.error(EError.noLForm);\n//     }\n//     // const fieldEl = ref<StateDefinitionField['field']['value']>(null)\n//     // form.fields[props.field.name] = fieldEl.value\n//     // const model = ref<StateDefinitionField['model']['value']>(\n//     //   // form.fields[props.field.name].model\n//     //   null\n//     // )\n\n//     // const api = {\n//     //   // field: fieldEl,\n//     // }\n//     // provide(FormFieldContext, api)\n\n//     // const onReset = () => {\n//     //   // console.group('Reset field')\n//     //   // console.log(form.formModel[props.field.name])\n//     //   // console.log('reset', form.fields[props.field.name].el.value.field.$el)\n\n//     //   // console.groupEnd()\n\n//     //   if (form.fields[props.field.name].el) {\n//     //     const typeField =\n//     //       form.fields[props.field.name].el.value.field.$el.getAttribute(\"type\");\n//     //     const newValue: any = typeField === \"number\" ? 0 : \"\";\n//     //     // switch (typeField) {\n//     //     //   case 'number':\n//     //     //     newValue = 0\n//     //     //     break\n//     //     //   default:\n//     //     //     break\n//     //     // }\n\n//     //     form.fields[props.field.name].el.value.$emit(\n//     //       \"update:modelValue\",\n//     //       newValue\n//     //     );\n//     //     form.fields[props.field.name].el.value.$emit(\"on-input\");\n//     //     form.fields[props.field.name].el.value.field.$el.focus();\n//     //   }\n//     // };\n\n//     // const el = ref(null)\n//     // watch(\n//     //   () => props.modelValue,\n//     //   () => {\n//     //     form?.onValidate(props.field.id || props.field.name)\n//     //   }\n//     // )\n\n//     // onMounted(() => {\n//     //   // if (form && props.name) {\n//     //   //   form.fields[props.name] = el.value\n//     //   // }\n//     //   console.log('onMounted', form.fields)\n//     // })\n\n//     const errorField = computed(() => {\n//       return form && form.errors.value\n//         ? form.errors.value[props.field.name]\n//         : null;\n//     });\n\n//     return () =>\n//       h(\n//         \"div\",\n//         {\n//           // ref: fieldEl,\n//           // 'data-model': model,\n//           role: \"group\",\n//           // 'aria-invalid': !!this.error,\n//         },\n//         {\n//           default: () => {\n//             const children = slots.default\n//               ? slots.default({\n//                   // element: fieldEl,\n//                   // value: props.modelValue,\n//                   // onReset: onReset,\n//                   // api: api,\n//                   errorField: errorField.value,\n//                 })\n//               : [];\n//             return children;\n//           },\n//         }\n//       );\n//     // {\n//     //   model,\n//     //   api,\n//     //   errorField,\n//     //   onReset,\n//     // }\n//   },\n// });\n\nexport const LFormField = defineComponent({\n  name: \"LFormField\",\n  props: {\n    field: {\n      type: Object as PropType<IField>,\n      required: true,\n      default: () => {\n        return {};\n      },\n    },\n  },\n  setup(props, { slots }) {\n    const form = inject(FormContext, null);\n\n    const id = props.field.id || props.field.name;\n\n    const errorField = computed(() => {\n      return form && form.errors.value && id\n        ? form.errors.value[id]\n        : undefined;\n    });\n\n    /**\n     * Boolean - true - if field is reqired, else false\n     */\n    const required = computed(\n      () =>\n        props.field.rules &&\n        props.field.rules.filter((x: any) => x.type === \"required\").length > 0\n    );\n\n    return () =>\n      h(\n        \"div\",\n        {\n          // role: 'group',\n          // 'aria-invalid': !!this.error,\n        },\n        {\n          default: () => {\n            const children = slots.default\n              ? slots.default({\n                  // element: fieldEl,\n                  errorField: errorField.value,\n                  required: required.value,\n                  // onReset: onReset,\n                })\n              : [];\n            return children;\n          },\n        }\n      );\n  },\n});\n\nexport const LFormFieldLabel = defineComponent({\n  name: \"LFormFieldLabel\",\n  props: {\n    field: {\n      type: Object as PropType<IField>,\n      required: true,\n    },\n  },\n  emits: [\"onSetFocus\"],\n  setup(props, { slots, emit }) {\n    const id = props.field.id || props.field.name;\n\n    const onFocus = () => {\n      emit(\"onSetFocus\");\n    };\n\n    return () =>\n      h(\n        \"label\",\n        {\n          id: id + \"_label\",\n          for: id,\n          onClick: withModifiers(() => onFocus(), []),\n        },\n        {\n          default: () =>\n            slots.default\n              ? slots.default({\n                  onFocus,\n                })\n              : [],\n        }\n      );\n  },\n});\n\nexport const LFormFieldDescription = defineComponent({\n  name: \"LFormFieldDescription\",\n  props: {\n    field: {\n      type: Object as PropType<IField>,\n      required: true,\n    },\n  },\n  setup(props, { slots }) {\n    const id = props.field.id || props.field.name;\n\n    return () =>\n      h(\n        \"div\",\n        {\n          id: id + \"_help\",\n        },\n        slots.default ? slots.default() : []\n      );\n  },\n});\n"],"names":["LSpinner","defineComponent","LIcon","_","slots","resolveComponent","h","n","FormContext","LForm","props","emit","formEl","ref","formModel","schema","errors","validateForm","computed","_a","form","provide","onResetForm","__name","LFormField","inject","id","errorField","required","x","LFormFieldLabel","onFocus","withModifiers","LFormFieldDescription"],"mappings":"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"}