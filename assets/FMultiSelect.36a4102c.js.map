{"version":3,"file":"FMultiSelect.36a4102c.js","sources":["../../src/components/LMultiSelect/LMultiSelect.ts","../../src/components/ui/FMultiSelect.vue"],"sourcesContent":["import {\n  computed,\n  defineComponent,\n  Fragment,\n  h,\n  inject,\n  nextTick,\n  onMounted,\n  onUnmounted,\n  provide,\n  ref,\n  watch,\n  withModifiers,\n  type HTMLAttributes,\n} from \"vue\";\nimport type {\n  ComputedRef,\n  InjectionKey,\n  PropType,\n  Ref,\n  WritableComputedRef,\n} from \"vue\";\nimport type { IField } from \"@/components/LForm\";\n\n// composable function\nimport { useId } from \"@/composable/useId\";\nimport { emit } from \"process\";\n\nenum EError {\n  \"noParent\" = \"%s must be use inner %s component!\",\n}\n\nexport interface IOption {\n  el: Ref<HTMLElement | null>;\n}\n\nexport type ISelectModel = number | string | [];\nexport type TSelectItem =\n  | {\n      [key: string]: string | number | boolean;\n    }\n  | string\n  | number\n  | boolean;\n\nexport interface IRange {\n  from: number;\n  to: number;\n}\n\nexport interface TGroups {\n  [key: string]: {\n    selected: any;\n    length: number;\n    key: string;\n  };\n}\n\n/**\n * state select\n */\nexport type StateDefinition = {\n  // State\n  id: string;\n\n  selectButtonEl: Ref<HTMLElement | null>;\n  searchEl: Ref<HTMLInputElement | null>;\n  listBoxEl: Ref<HTMLFormElement | null>;\n\n  // optionsElement: Ref<{ [key: string]: Ref<HTMLElement | null> }>;\n  optionsEl: Ref<{ key: string; el: HTMLElement }[]>;\n\n  focusOption: Ref<number>;\n  model: WritableComputedRef<ISelectModel[]>;\n\n  selectedOptions: ComputedRef<TSelectItem[]>;\n\n  filteredOptions: ComputedRef<TSelectItem[]>;\n  filterText: Ref<string>;\n  field: Ref<IField>;\n\n  groups: ComputedRef<TGroups>;\n  groupkey: string | undefined;\n\n  disabled: Ref<boolean>;\n  loading: Ref<boolean>;\n\n  show: Ref<Boolean>;\n\n  searchQuery: Ref<string>;\n\n  pressShift: Ref<boolean>;\n  indexShiftFrom: Ref<number>;\n  indexShiftTo: Ref<number>;\n\n  registerOverlay: () => void;\n  unRegisterOverlay: () => void;\n  chooseItemsOfRange: ({ range }: { range: IRange }) => void;\n  onLoadItems: () => void; // params\n  updateModel: (val: ISelectModel) => void;\n  clearSearchQuery: () => void;\n\n  onChangeActiveIndex: (e: KeyboardEvent) => number;\n  onChooseOption: (option: ISelectModel) => void;\n  onChooseGroup: (group: TGroups) => void;\n  onSetFocus: () => void;\n};\n\nexport const SelectContext = Symbol(\n  \"SelectContext\"\n) as InjectionKey<StateDefinition>;\n\nexport const LMultiSelect = defineComponent({\n  name: \"LMultiSelect\",\n  props: {\n    modelValue: {\n      type: [Array, String, Number] as PropType<ISelectModel>,\n      default: () => {\n        return [];\n      },\n    },\n    showField: {\n      type: Boolean,\n      default: false,\n    },\n    field: {\n      type: Object as PropType<IField>,\n      required: true,\n      default: () => {\n        return {};\n      },\n    },\n  },\n  emits: [\n    \"update:showList\",\n    \"update:modelValue\",\n    \"onLoadItems\",\n    \"on-input\",\n    \"on-choose\",\n    \"on-choose-group\",\n  ],\n  setup(props, { emit, slots, expose }) {\n    const close = (e: Event) => {\n      const el = e.target as HTMLInputElement;\n      if (\n        !select.selectButtonEl.value?.contains(el) &&\n        !select.listBoxEl.value?.contains(el) &&\n        !select.searchEl.value?.contains(el)\n      ) {\n        show.value = false;\n        unRegisterOverlay();\n        // select.selectButtonEl.value?.focus({ preventScroll: true })\n      }\n    };\n\n    const unRegisterOverlay = () => {\n      document.removeEventListener(\"click\", close);\n      document.removeEventListener(\"keyup\", close);\n    };\n\n    const registerOverlay = () => {\n      document.addEventListener(\"click\", close);\n      document.addEventListener(\"keyup\", close);\n    };\n\n    const searchEl = ref<StateDefinition[\"searchEl\"][\"value\"]>(null);\n    const optionsEl = ref<StateDefinition[\"optionsEl\"][\"value\"]>([]);\n    // const optionsElement = ref<StateDefinition[\"optionsElement\"][\"value\"]>({});\n\n    const selectButtonEl =\n      ref<StateDefinition[\"selectButtonEl\"][\"value\"]>(null);\n    const listBoxEl = ref<StateDefinition[\"listBoxEl\"][\"value\"]>(null);\n    const field = ref<StateDefinition[\"field\"][\"value\"]>(props.field);\n    const indexShiftFrom = ref(0); // <StateDefinition[\"indexShiftFrom\"][\"value\"]>\n    const indexShiftTo = ref(0); // <StateDefinition[\"indexShiftTo\"][\"value\"]>\n    const pressShift = ref(false); // <StateDefinition[\"pressShift\"][\"value\"]>\n    const searchQuery = ref(\"\"); // <StateDefinition[\"searchQuery\"][\"value\"]>\n    const show = ref(false); // <StateDefinition[\"show\"][\"value\"]>\n    const disabled = ref(false); // <StateDefinition[\"disabled\"][\"value\"]>\n    const loading = ref(false); // <StateDefinition[\"loading\"][\"value\"]>\n    const filterText = ref(\"\"); // <StateDefinition[\"filterText\"][\"value\"]>\n    const focusOption = ref(0); // <StateDefinition[\"focusOption\"][\"value\"]>\n\n    watch(\n      () => show.value,\n      (val) => {\n        emit(\"update:showList\", val);\n      }\n    );\n\n    const groupkey = field.value.keyGroup || undefined;\n\n    const model = computed({\n      get() {\n        return props.field.multiple && Array.isArray(props.modelValue)\n          ? [...props.modelValue]\n          : props.modelValue\n          ? [props.modelValue]\n          : [];\n      },\n      set(value) {\n        const newValue = field.value.multiple ? value : value[0];\n        emit(\"update:modelValue\", newValue), emit(\"on-input\", newValue);\n      },\n    });\n\n    const filteredOptions = computed(() => {\n      // console.time(\"filteredOptions\");\n\n      const allOptions = field.value.items || [];\n      let result: TSelectItem[] = allOptions;\n      const keyFilter = field.value.keyFilter;\n      if (keyFilter) {\n        result = allOptions\n          .filter((x) =>\n            typeof x == \"object\"\n              ? x[keyFilter]\n                  .toLowerCase()\n                  .indexOf(filterText.value.toLowerCase()) !== -1\n              : typeof x == \"number\"\n              ? x !== -1\n              : x.toLowerCase().indexOf(filterText.value.toLowerCase()) !== -1\n          )\n          .sort(\n            (a: any, b: any) =>\n              select.model.value.indexOf(a[keyFilter]) -\n              select.model.value.indexOf(b[keyFilter])\n          );\n      }\n      // console.timeEnd(\"filteredOptions\");\n      return result;\n    });\n    /**\n     * All selected items (options).\n     */\n    const selectedOptions = computed(() => {\n      const allOptions = field.value.items || [];\n      const keyValue = field.value.keyValue;\n      let result: TSelectItem[] = [];\n      result = allOptions\n        .filter((x) =>\n          select.model.value.includes(\n            typeof x == \"object\" && keyValue ? x[keyValue] : x\n          )\n        )\n        .sort(\n          (a, b) =>\n            select.model.value.indexOf(a[keyValue]) -\n            select.model.value.indexOf(b[keyValue])\n        );\n      return result;\n    });\n\n    const groups = computed(() => {\n      // <StateDefinition[\"groups\"][\"value\"]>\n      const groups: TGroups = {}; // new Set()\n      if (!groupkey) {\n        groups[\"default\"] = {\n          selected: selectedOptions.value.length || 0,\n          length: field.value.items?.length || 0,\n          key: \"default\",\n        };\n      }\n      if (groupkey) {\n        filteredOptions.value\n          .sort((a, b) =>\n            typeof a[groupkey] == \"string\"\n              ? a[groupkey].localeCompare(b[groupkey])\n              : a - b\n          )\n          ?.forEach((x) => {\n            // console.log(x[select.groupkey])\n            let _group =\n              typeof x[groupkey] == \"string\"\n                ? x[groupkey]\n                : x[groupkey].toString();\n            if (typeof x == \"object\") {\n              groups[_group] = {\n                selected: selectedOptions.value.filter(\n                  (y) => typeof y == \"object\" && y[groupkey] == _group\n                ).length,\n                length: groups[_group] ? groups[_group].length + 1 : 1,\n                key: _group,\n              };\n            }\n          });\n      }\n      return groups; // Object.keys(groups)\n    });\n\n    expose({\n      elselect: selectButtonEl,\n    });\n\n    const chooseItemsOfRange = ({ range }: { range: IRange }) => {\n      // if not multiple mode\n      if (!field.value.multiple) {\n        // console.error(EError.noParent, \"LMultiSelectButton\", \"LMultiSelect\");\n        return;\n      }\n\n      // if multiple option - select range options\n      const { from, to } = range;\n      if (!field.value.items) {\n        return;\n      }\n\n      const chooseItems = field.value.items.slice(\n        from < to ? from : to,\n        to > from ? to + 1 : from + 1\n      );\n      select.model.value = JSON.parse(\n        JSON.stringify(\n          chooseItems.map((x) =>\n            field.value.keyValue && typeof x == \"object\"\n              ? x[field.value.keyValue]\n              : x\n          )\n        )\n      );\n      // 1\n      // select.updateModel(\n      //   select.schema.value.multiple ? select.model.value : select.model.value\n      // )\n    };\n\n    /**\n     * Choose option.\n     * @param option object | string | number\n     */\n    const onChooseOption = (option: ISelectModel) => {\n      const value = select?.field.value.keyValue\n        ? option[select.field.value.keyValue]\n        : option;\n      const index = select.model.value.findIndex(\n        (x: number | string) => x === value\n      );\n      let newValue: (string | number)[] = [...select.model.value];\n      if (select.field.value.multiple) {\n        if (index !== -1) {\n          newValue.splice(index, 1);\n        } else {\n          newValue.push(value);\n        }\n      } else {\n        newValue = [value];\n      }\n      emit(\"on-choose\", option);\n      select.model.value = newValue;\n    };\n\n    /**\n     * Choose group options\n     */\n    const onChooseGroup = (group: TGroups) => {\n      console.time(\"chooseGroup\");\n      if (!select?.field.value.multiple) {\n        return;\n      }\n      const { length, selected } = group;\n      const allOptionsOfGroup = select.field.value.items\n        .filter((x) =>\n          select.groupkey ? x[select.groupkey] === group.key : true\n        )\n        .map((x) =>\n          select.field.value.keyValue ? x[select.field.value.keyValue] : x\n        );\n      emit(\"on-choose-group\", allOptionsOfGroup);\n\n      const newValue =\n        length !== selected\n          ? select.model.value.concat(allOptionsOfGroup)\n          : select.model.value.filter((x) => allOptionsOfGroup.indexOf(x) < 0);\n      select.model.value = newValue;\n      console.timeEnd(\"chooseGroup\");\n    };\n\n    /**\n     * Change index active option.\n     * @param e KeyboardEvent\n     * @returns newIndex number\n     */\n    const onChangeActiveIndex = (e: KeyboardEvent) => {\n      let newIndex = select.focusOption.value || 0;\n\n      if (select.focusOption.value == -1) {\n        newIndex = 0;\n      }\n      if (e.key === \"ArrowDown\") {\n        newIndex++;\n        // e.preventDefault();\n      } else if (e.key === \"ArrowUp\") {\n        newIndex--;\n        // e.preventDefault();\n      }\n      if (newIndex > select.optionsEl.value.length - 1) {\n        newIndex = select.optionsEl.value.length - 1;\n      }\n      if (newIndex < 0) {\n        newIndex = 0;\n      }\n\n      // select.focusOption.value = newIndex;\n      return newIndex;\n    };\n\n    // если есть выбранные элементы, то устанавливаем фокус на первый из них\n    const onSetFocus = () => {\n      if (!select.focusOption.value) {\n        select.focusOption.value = 0;\n      }\n      // if (select.model.value.length <= 0) {\n      //   select.focusOption.value = 0;\n      //   // return;\n      // }\n      const firstValue = select.field.value.multiple\n        ? select.model.value[0]\n        : select.model.value;\n\n      // if (!firstValue) return;\n      const keyValue = select.field.value.keyValue;\n      const index = select.filteredOptions.value.findIndex((x) =>\n        keyValue && typeof x == \"object\"\n          ? x[keyValue] == firstValue\n          : x == firstValue\n      );\n      if (index && index != -1) {\n        select.focusOption.value = index;\n      } else {\n        // select.focusOption.value = 0;\n      }\n\n      // if (index == -1) {\n      //   select.selectButtonEl.value?.focus();\n      //   // return;\n      // }\n      nextTick(() => {\n        const value = select.filteredOptions.value[select.focusOption.value];\n        const elForFocus = select.optionsEl.value.find(\n          (x) => x.key === (keyValue ? value[keyValue] : value)\n        );\n        if (elForFocus.el) {\n          //  && !select.searchEl.value\n          elForFocus.el?.focus();\n        }\n      });\n      // console.log(\n      //   \"set focus\",\n      //   firstValue,\n      //   \"focusOption.value=\",\n      //   index,\n      //   keyValue\n      // );\n    };\n\n    const select = {\n      id: props.field.name,\n      selectButtonEl,\n      listBoxEl,\n      searchEl,\n\n      optionsEl,\n      // optionsElement,\n\n      focusOption,\n      model,\n      field,\n      show,\n\n      loading,\n      disabled,\n\n      groups,\n      groupkey,\n\n      /**\n       * selected options\n       */\n      selectedOptions,\n\n      filteredOptions,\n      filterText,\n\n      searchQuery,\n      clearSearchQuery() {\n        if (searchQuery.value === \"\") return;\n\n        searchQuery.value = \"\";\n      },\n\n      pressShift,\n      indexShiftFrom,\n      indexShiftTo,\n\n      registerOverlay,\n      unRegisterOverlay,\n      chooseItemsOfRange,\n      onLoadItems: () => emit(\"onLoadItems\"),\n      updateModel: (val: ISelectModel) => {\n        emit(\"update:modelValue\", val), emit(\"on-input\", val);\n      },\n\n      onChangeActiveIndex,\n      onChooseOption,\n      onChooseGroup,\n      onSetFocus,\n    };\n\n    provide(SelectContext, select);\n\n    const loadData = async () => {\n      loading.value = true;\n      disabled.value = true;\n      await emit(\"onLoadItems\");\n      loading.value = false;\n      disabled.value = false;\n    };\n\n    onMounted(async () => {\n      await loadData();\n      if (field.value.autofocus) {\n        nextTick(() => {\n          if (select.searchEl.value) {\n            select.searchEl.value.focus();\n          } else {\n            selectButtonEl.value?.focus();\n          }\n        });\n      }\n    });\n\n    return () =>\n      h(\n        \"div\",\n        {\n          // onBlur: () => {\n          //   // console.log('blur select button')\n          //   select.show.value = false\n          // },\n        },\n        {\n          default: () =>\n            slots.default\n              ? slots.default({\n                  select,\n                  loading: loading.value,\n                  disabled: disabled.value,\n                  show: select.show.value,\n                  filteredOptions: filteredOptions.value,\n                  focusOption: select.focusOption.value,\n                  indexShiftFrom: select.indexShiftFrom.value,\n                  indexShiftTo: select.indexShiftTo.value,\n                  selectedOptions: select.selectedOptions.value || [],\n                })\n              : [],\n        }\n      );\n  },\n});\n\nexport const LMultiSelectButton = defineComponent({\n  name: \"LMultiSelectButton\",\n  setup(props, { slots }) {\n    const select = inject(SelectContext);\n    if (!select) {\n      console.info(EError.noParent, \"LMultiSelectButton\", \"LMultiSelect\");\n      return;\n    }\n    // const selectButtonEl = ref<StateDefinition['selectButtonEl']['value']>(null)\n    const aria = computed(() => {\n      const aria: HTMLAttributes = {};\n      if (select.show.value) {\n        aria[\"aria-controls\"] = `${select.field.value.name}-listbox`;\n      }\n      return aria;\n    });\n\n    const propsType = computed(() =>\n      select.searchEl.value\n        ? {}\n        : {\n            role: \"button\",\n            type: \"button\",\n            tabindex: 0,\n            disabled: select.disabled.value,\n            \"aria-expanded\": select.show.value,\n            \"aria-haspopup\": \"listbox\",\n            \"aria-labelledby\": select.field.value.label\n              ? `${select.field.value.name}_label`\n              : undefined,\n            ...aria.value,\n          }\n    );\n\n    return () =>\n      h(\n        select.searchEl.value ? \"div\" : \"button\",\n        {\n          ref: select.selectButtonEl,\n          id: `${select.id}-button`,\n          ...propsType.value,\n          onClick: withModifiers(() => {\n            // e: MouseEvent\n            // nextTick(() => {\n            //   select.searchEl.value?.focus();\n            // });\n            select.show.value = !select.show.value;\n            if (select.show.value) {\n              nextTick(() => {\n                select.onSetFocus();\n              });\n              // set focus input element.\n              if (select.searchEl.value) {\n                nextTick(() => {\n                  select.searchEl.value?.focus();\n                });\n              }\n              setTimeout(() => {\n                select.registerOverlay();\n              }, 50);\n\n              // nextTick(() => {\n              //   select.optionsEl[select.focusOption.value]?.value.focus()\n              // })\n            } else {\n              select.unRegisterOverlay();\n            }\n            // console.log('click select button', select.show.value)\n          }, []),\n          onKeydown: withModifiers((e: KeyboardEvent) => {\n            switch (e.key) {\n              case \"Enter\":\n                // console.log(\n                //   \"select.focusOption.value=\",\n                //   select.focusOption.value\n                // );\n\n                select.onChooseOption(\n                  select.filteredOptions.value[select.focusOption.value]\n                );\n                if (!select.field.value.multiple) {\n                  nextTick(() => {\n                    if (select.searchEl.value) {\n                      select.searchEl.value?.focus();\n                    } else {\n                      select.selectButtonEl.value?.focus({\n                        preventScroll: true,\n                      });\n                    }\n                    select.show.value = false;\n                  });\n                  // e.stopPropagation();\n                  // e.preventDefault();\n                }\n                break;\n              case \"ArrowUp\":\n              case \"ArrowDown\":\n                if (!select.show.value) {\n                  select.show.value = true;\n                  // console.log(`select ${select.focusOption.value}`)\n                  select.registerOverlay();\n                }\n                if (select.show.value) {\n                  select.onChangeActiveIndex(e);\n                }\n                nextTick(() => {\n                  select.onSetFocus();\n                });\n                // nextTick(() => {\n                //   console.log(\"focus listBoxEl\");\n                //   select.listBoxEl.value?.focus({ preventScroll: true });\n                // });\n                // nextTick(() => {\n                //   select.optionsEl[select.focusOption.value]?.el.focus();\n                // });\n\n                // set focus input element.\n                // nextTick(() => {\n                //   select.searchEl.value?.focus();\n                // });\n\n                break;\n              case \"Escape\":\n                select.show.value = false;\n                select.focusOption.value = 0;\n                select.unRegisterOverlay();\n                break;\n            }\n            // if (e.key === \"Enter\" || e.key === \"ArrowDown\") {\n            //   if (!select.show.value) {\n            //     select.show.value = true;\n            //     select.onSetFocus();\n            //     // console.log(`select ${select.focusOption.value}`)\n            //     select.registerOverlay();\n            //   }\n            //   nextTick(() => {\n            //     console.log(\"focus listBoxEl\");\n            //     select.listBoxEl.value?.focus({ preventScroll: true });\n            //   });\n            //   nextTick(() => {\n            //     select.optionsEl[select.focusOption.value]?.el.focus();\n            //   });\n\n            //   // set focus input element.\n            //   if (select.searchEl.value) {\n            //     nextTick(() => {\n            //       select.searchEl.value?.focus();\n            //     });\n            //   }\n\n            //   // e.preventDefault();\n            // }\n          }, []),\n          // onFocus: () => {\n          //   // console.log(\"focus select button\", select.searchEl.value);\n          //   // if (!select.show.value) {\n          //   //   select.show.value = true\n          //   // }\n          //   nextTick(() => {\n          //     if (select.searchEl.value) {\n          //       select.searchEl.value.focus();\n          //     }\n          //   });\n          // },\n        },\n        slots.default\n          ? slots.default({\n              show: select.show.value,\n              disabled: select.disabled.value,\n              loading: select.loading.value,\n            })\n          : []\n      );\n  },\n});\n\nexport const LMultiSelectList = defineComponent({\n  name: \"LMultiSelectList\",\n  setup(props, { emit, slots }) {\n    const select = inject(SelectContext);\n\n    const removeOption = (item) => {\n      const indexValue = select.model.value.findIndex(\n        (x: string) => x == (item[select.field.value.keyValue] || item)\n      );\n      if (indexValue !== -1) {\n        const newValue = [...select.model.value];\n        newValue.splice(indexValue, 1);\n        select.model.value = newValue;\n      }\n      // if (select.show.value) {\n      //   select.show.value = false\n      // }\n      // select.updateModel(\n      //   select.schema.value.multiple\n      //     ? select.model.value.map((x) =>\n      //         select.schema.value.valuekey ? x[select.schema.value.valuekey] : x\n      //       )\n      //     : select.schema.value.valuekey\n      //     ? select.model.value[0][select.schema.value.valuekey]\n      //     : select.model.value[0]\n      // )\n      // 2\n      // select.updateModel(\n      //   select.schema.value.multiple\n      //     ? select.model.value\n      //     : select.model.value[0]\n      // )\n    };\n\n    const removeLast = () => {\n      select.model.value.splice(select.model.value.length - 1, 1);\n    };\n    // watch(\n    //   () => select.model,\n    //   (val, oldVal) => {\n    //     console.log('watch: ', val, oldVal)\n    //   }\n    // )\n    // const selectedOptions = computed(() => {\n    //   // console.log('items computed: ', select.schema.value.items)\n    //   const allOptions = select.schema.value.items\n    //   return allOptions\n    //     .filter((x: any) => select.model.value.includes(x.id))\n    //     .sort(\n    //       (a: any, b: any) =>\n    //         select.model.value.indexOf(a.id) - select.model.value.indexOf(b.id)\n    //     )\n    // })\n\n    return () =>\n      h(\n        Fragment,\n        {},\n        slots.default\n          ? slots.default({\n              removeOption,\n              onKeydown: (e) => {\n                if (e.key === \"Backspace\") {\n                  removeLast();\n                }\n              },\n            })\n          : []\n      );\n  },\n});\n// export const LMultiSelectItem = defineComponent({\n//   name: \"LMultiSelectItem\",\n//   setup(props, { slots }) {\n//     const select = inject(SelectContext);\n\n//     return () => h(\"div\", {}, slots.default ? slots.default() : null);\n//   },\n// });\n\nexport const LMultiSelectSearch = defineComponent({\n  name: \"LMultiSelectSearch\",\n  // inheritAttrs: false,\n  setup(props, { slots }) {\n    const select = inject(SelectContext, {});\n    const newValue = ref(\"\");\n    // const addItem = () => {\n    //   console.log('add', newValue.value)\n    //   select.model.value.push(newValue.value)\n    //   newValue.value = ''\n    // }\n    const searchDebounce = ref<ReturnType<typeof setTimeout> | null>(null);\n    const onSearch = () => {\n      select.filterText.value = newValue.value;\n      // select.onLoadItems({ text: newValue.value })\n      select.loading.value = false;\n      // select.focusOption.value = 0;\n      if (!select.show.value) {\n        select.show.value = true;\n        setTimeout(() => {\n          select.registerOverlay();\n        }, 50);\n      }\n    };\n\n    return () =>\n      h(\n        \"input\",\n        {\n          ref: (el) => (select.searchEl.value = el),\n          role: \"combobox\",\n          tabindex: 0,\n          placeholder: select.field.value?.placeholder,\n          disabled: select.disabled.value,\n          \"aria-expanded\": select.show.value,\n          \"aria-haspopup\": \"listbox\",\n          \"aria-labelledby\": select.field.value.label\n            ? `${select.field.value.name}_label`\n            : undefined,\n          \"aria-controls\": select.show.value\n            ? `${select.field.value.name}-listbox`\n            : undefined,\n          value: newValue.value,\n          onInput: (e: KeyboardEvent) => {\n            const el = e.target as HTMLInputElement;\n            if (searchDebounce.value) clearTimeout(searchDebounce.value);\n            select.loading.value = true;\n            searchDebounce.value = setTimeout(() => onSearch(), 350);\n            newValue.value = el.value;\n          },\n          // onKeydown: withModifiers((e: KeyboardEvent) => {\n          //   console.log(\"LMultiSelectSearch: onKeydown key=\", e.key);\n          //   // if (e.key === \"ArrowUp\" || e.key === \"ArrowDown\") {\n          //   //   if (select.show.value) {\n          //   //     const newIndex = select.onChangeActiveIndex(e);\n          //   //     select.focusOption.value = newIndex;\n          //   //   } else {\n          //   //     // select.show.value = true;\n          //   //     // select.focusOption.value = 0;\n          //   //   }\n          //   //   console.log(\n          //   //     \"LMultiSelectSearch: onKeydown select.focusOption.value=\",\n          //   //     select.focusOption.value\n          //   //   );\n          //   //   e.preventDefault();\n          //   // } else if (e.key == \"Enter\") {\n          //   //   select.onChooseOption(\n          //   //     select.filteredOptions.value[select.focusOption.value]\n          //   //   );\n          //   //   if (!select.field.value.multiple) {\n          //   //     nextTick(() => {\n          //   //       select.selectButtonEl.value?.focus({ preventScroll: true });\n          //   //       select.show.value = false;\n          //   //     });\n          //   //     // e.stopPropagation();\n          //   //     // e.preventDefault();\n          //   //   }\n          //   // } else if (e.key == \"Escape\") {\n          //   //   select.show.value = false;\n          //   //   select.focusOption.value = -1;\n          //   // }\n          // }, []),\n        }\n        // slots.default\n        //   ? slots.default({\n        //       value: newValue.value,\n        //       placeholder: select.field.value.placeholder,\n        //       onInput: (e) => {\n        //         // console.log(\"onInput\", e);\n\n        //         if (searchDebounce.value) clearTimeout(searchDebounce.value);\n        //         select.loading.value = true;\n        //         searchDebounce.value = setTimeout(() => onSearch(), 350);\n        //         newValue.value = e.target.value;\n        //       },\n        //     })\n        //   : []\n      );\n  },\n});\n\nexport const LMultiSelectOptions = defineComponent({\n  name: \"LMultiSelectOptions\",\n  setup(props, { slots }) {\n    const select = inject(SelectContext);\n    if (!select) {\n      return;\n    }\n\n    const id = useId();\n\n    const aria = computed(() => {\n      const aria: HTMLAttributes = {};\n      if (select.focusOption.value != null && select.focusOption.value !== -1) {\n        aria[\n          \"aria-activedescendant\"\n        ] = `${select.id}-option-${select.focusOption.value}`;\n      }\n      if (select.field.value.multiple) {\n        aria[\"aria-multiselectable\"] = true;\n      }\n      return aria;\n    });\n\n    const toggleChooseAll = () => {\n      // if not multiple mode.\n      if (!select.field.value.multiple) return;\n      const keyValue = select.field.value.keyValue;\n\n      // if multiple mode - select or deselect all options\n      if (select.model.value.length === select.field.value.items?.length) {\n        select.model.value = [];\n        // 3\n        // select.updateModel([])\n      } else {\n        const allSelectedOptions = select.field.value.items?.map((x) =>\n          keyValue && typeof x == \"object\" ? x[keyValue] : x\n        );\n        if (allSelectedOptions) select.model.value = allSelectedOptions;\n        // 4\n        // select.updateModel(allSelectedOptions)\n      }\n    };\n\n    const searchDebounce = ref<ReturnType<typeof setTimeout> | null>(null);\n\n    // const onSearch = (value: string) => {\n    //   if (!select.show.value) return;\n    //   if (value.length > 1) return;\n    //   select.searchQuery.value += value.toLowerCase();\n\n    //   const allOptions = select.field.value.keyFilter\n    //     ? select.filteredOptions.value\n    //     : select.field.value.items;\n\n    //   const indexFindElement = allOptions.findIndex((x) =>\n    //     x[select.field.value.keyValue]\n    //       .toLowerCase()\n    //       .startsWith(select.searchQuery.value)\n    //   );\n    //   // console.log('searchQuery=', sselect.searchQuery.value, indexFindElement)\n    //   if (indexFindElement !== -1) {\n    //     select.focusOption.value = indexFindElement;\n    //     select.optionsEl[indexFindElement].value.focus();\n    //   }\n    // };\n\n    return () =>\n      h(\n        \"div\",\n        {\n          ref: select.listBoxEl,\n          id: `${select.field.value.name}-listbox`,\n          role: \"listbox\",\n          \"aria-labelledby\": `${select.field.value.name}_label`,\n          tabindex: 0,\n          ...aria.value,\n          onKeydown: withModifiers(\n            (e: KeyboardEvent) => {\n              if (searchDebounce.value) clearTimeout(searchDebounce.value);\n              // onSearch(e.key);\n              searchDebounce.value = setTimeout(\n                () => select.clearSearchQuery(),\n                350\n              );\n\n              // select all options\n              if (e.ctrlKey && e.key === \"a\") {\n                toggleChooseAll();\n                e.preventDefault();\n              }\n\n              if (e.key === \"Escape\") {\n                select.focusOption.value = 0;\n                select.show.value = false;\n                if (select.searchEl.value) {\n                  select.searchEl.value?.focus();\n                } else {\n                  select.selectButtonEl.value?.focus({ preventScroll: true });\n                }\n                return;\n              }\n\n              // change index active option.\n              const newIndex = select.onChangeActiveIndex(e);\n              e.preventDefault();\n              if (newIndex !== select.focusOption.value) {\n                // set focus by index element from selected elements.\n                select.focusOption.value = newIndex;\n                // select.filteredOptions.value[newIndex]?.focus();\n                const keyValue = select.field.value.keyValue;\n                const value = select.filteredOptions.value[newIndex];\n                const elForFocus = select.optionsEl.value.find((x) => {\n                  let val = value;\n                  if (typeof value == \"object\" && keyValue) {\n                    val = value[keyValue];\n                  }\n                  return x.key == val;\n                });\n                if (elForFocus) {\n                  //  && !select.searchEl.value\n                  elForFocus.el?.focus();\n                  // console.log(\"focus index option = \", newIndex, elForFocus.el);\n                } else {\n                  // select.searchEl.value?.focus();\n                }\n                // select.optionsEl[newIndex].value?.focus();\n              }\n              if (!e.shiftKey) {\n                select.indexShiftFrom.value = newIndex;\n              }\n\n              if (\n                e.shiftKey &&\n                (e.key === \"ArrowDown\" || e.key === \"ArrowUp\")\n              ) {\n                select.indexShiftTo.value = select.focusOption.value;\n                select.chooseItemsOfRange({\n                  range: {\n                    from: select.indexShiftFrom.value,\n                    to: select.indexShiftTo.value,\n                  },\n                });\n                // select.indexShiftFrom.value =\n                //   select.indexShiftFrom.value || select.focusOption.value\n                // console.group('onKeyDown')\n                // console.log(\n                //   'select.focusOption.value=',\n                //   select.focusOption.value\n                // )\n                // console.log('From =', select.indexShiftFrom.value)\n                // console.log('To =', select.indexShiftTo.value)\n                // console.groupEnd()\n              }\n            },\n            [\"stop\"]\n          ),\n          onKeyup: (e: KeyboardEvent) => {\n            if (e.key === \"Shift\") {\n              select.pressShift.value = false;\n              select.indexShiftFrom.value = 0;\n              select.indexShiftTo.value = 0;\n            }\n          },\n          onFocus: () => {},\n        },\n        slots.default\n          ? slots.default({\n              groups: select?.groups.value,\n              options: select?.filteredOptions.value, // select.schema.value.items,\n            })\n          : []\n      );\n  },\n});\n\nexport const LMultiSelectGroup = defineComponent({\n  name: \"LMultiSelectGroup\",\n  props: {\n    group: {\n      type: [String, Number],\n      default: \"default\",\n      required: true,\n    },\n  },\n  setup(props, { slots, emit }) {\n    const select = inject(SelectContext);\n    if (!select) {\n      return;\n    }\n\n    const id = useId();\n\n    const currentGroup = computed(() => select.groups.value[props.group]);\n\n    /**\n     * options for current group\n     */\n    const options = computed(() => {\n      const allOptions = select.field.value.keyFilter\n        ? select.filteredOptions.value\n        : select.field.value.items;\n      return select.groupkey\n        ? allOptions.filter((x) => x[select.groupkey] === props.group)\n        : allOptions;\n    });\n\n    const groupSelect = computed(\n      () => currentGroup.value.selected === currentGroup.value.length\n    );\n\n    return () =>\n      h(\n        \"div\",\n        {\n          // ref: optionEl,\n          id: `${select?.id}-group-${id}`,\n          role: \"group\",\n          \"aria-disabled\": false,\n          // tabindex: -1, // disabled === true ? undefined : -1,\n          // 'aria-selected': false,\n          onClick: withModifiers(() => {\n            select.onChooseGroup(currentGroup.value);\n          }, [\"stop\"]),\n        },\n        slots.default\n          ? slots.default({\n              groupId: id,\n              options: options.value,\n              groupSelectedOption: currentGroup.value.selected,\n              groupLength: currentGroup.value.length,\n              groupSelect: groupSelect.value,\n            })\n          : []\n      );\n  },\n});\n\nexport const LMultiSelectOption = defineComponent({\n  name: \"LMultiSelectOption\",\n  props: {\n    // id: {\n    //   type: [String, Number],\n    //   default: 0,\n    //   required: true,\n    // },\n    value: {\n      type: [String, Number, Object],\n      default: \"\",\n    },\n  },\n  setup(props, { slots }) {\n    const select = inject(SelectContext);\n    const optionEl = ref<HTMLElement>(null);\n    const key = computed(() =>\n      select.field.value.keyValue\n        ? props.value[select.field.value.keyValue]\n        : props.value\n    );\n\n    onMounted(() => {\n      select.optionsEl.value.push({\n        key: key.value,\n        el: optionEl.value,\n      });\n      // select.optionsElement.value[key.value] = optionEl;\n      // console.log(\"add key=\", key.value, \" props.value=\", props.value);\n    });\n\n    const id = useId();\n    const index = computed(() =>\n      select.optionsEl.value.findIndex((x) => x.key == key.value)\n    );\n\n    onUnmounted(() => {\n      // console.log(\"remove key=\", index);\n      // delete select.optionsElement.value[key.value];\n      select?.optionsEl.value.splice(index.value, 1);\n    });\n\n    const selected = computed(() => {\n      // console.log('computed check')\n      return select.model.value.includes(\n        select.field.value.keyValue\n          ? props.value[select.field.value.keyValue]\n          : props.value\n      );\n    });\n    const hovered = computed(() => {\n      // console.log('computed check')\n      const keyValue = select.field.value.keyValue;\n      const value = select.filteredOptions.value[select.focusOption.value];\n      let isHovered = false;\n      if (value) {\n        isHovered =\n          (keyValue ? props.value[keyValue] : props.value) ==\n          (keyValue ? value[keyValue] : value);\n      }\n      return isHovered;\n      // select.model.value.includes(\n      //   select.field.value.keyValue\n      //     ? props.value[select.field.value.keyValue]\n      //     : props.value\n      // );\n    });\n\n    // const optionElement = slots.default({\n    //   // value: props.value,\n    //   optionId: id,\n    //   selected: selected.value,\n    //   focused: select?.focusOption.value,\n    // });\n    // console.log(\"optionElement=\", optionElement);\n\n    return () =>\n      h(\n        \"div\",\n        {\n          ref: optionEl,\n          id: `${select.id}-option-${id}`,\n          role: \"option\",\n          \"aria-disabled\": false,\n          tabindex: -1, // disabled === true ? undefined : -1,\n          \"aria-selected\": selected.value === true ? selected.value : undefined,\n          onFocus: () => {\n            // if (select.pressShift.value) {\n            //   chooseItem()\n            // }\n          },\n          onKeydown: (e: KeyboardEvent) => {\n            // if (e.shiftKey) {\n            // }\n\n            // if (e.shiftKey && (e.key === 'ArrowDown' || e.key === 'ArrowUp')) {\n            //   // chooseItem()\n\n            //   select.pressShift.value = true\n            //   select.indexShiftTo.value = props.id\n            //   console.log('props.id=', props.id)\n            //   console.log('indexShiftFrom=', select.indexShiftFrom.value)\n            //   console.log('indexShiftTo=', select.indexShiftTo.value)\n            // }\n            // console.log('Key press of option (choose)', e.key)\n            if (e.key === \"Enter\") {\n              select.onChooseOption(props.value);\n              if (!select.field.value.multiple) {\n                select.show.value = false;\n\n                if (select.searchEl.value) {\n                  select.searchEl.value?.focus();\n                } else {\n                  select.selectButtonEl.value?.focus({\n                    preventScroll: true,\n                  });\n                }\n                e.preventDefault();\n              }\n            }\n          },\n          onMouseenter: (e) => {\n            // console.log(\"LMultiSelectOption: onMouseenter\");\n\n            select.focusOption.value = index.value;\n            if (!e.shiftKey) {\n              select.indexShiftFrom.value = select.focusOption.value;\n            } else {\n              select.indexShiftTo.value = select.focusOption.value - 1;\n            }\n          },\n          onMouseleave: (e) => {\n            // console.log(\"LMultiSelectOption: onMouseleave\");\n\n            select.focusOption.value = null;\n            if (!e.shiftKey) {\n              select.indexShiftFrom.value = 0;\n            }\n          },\n          onClick: withModifiers(\n            (e) => {\n              // console.log(\"LMultiSelectOption: onClick\");\n              if (e.shiftKey) {\n                select.chooseItemsOfRange({\n                  range: {\n                    from: select.indexShiftFrom.value,\n                    to: select.indexShiftTo.value,\n                  },\n                });\n              } else {\n                select?.onChooseOption(props.value);\n                if (!select.field.value.multiple) {\n                  select.selectButtonEl.value.focus({ preventScroll: true });\n                  select.show.value = false;\n                  e.preventDefault();\n                }\n\n                nextTick(() => {\n                  if (select?.searchEl.value) {\n                    select?.searchEl.value?.focus();\n                    e.preventDefault();\n                  }\n                });\n              }\n            },\n            [\"stop\"]\n          ),\n        },\n        slots.default\n          ? slots.default({\n              // value: props.value,\n              optionId: id,\n              selected: selected.value,\n              hovered: hovered.value,\n              focused: select?.focusOption.value,\n            })\n          : []\n      );\n  },\n});\n","<script lang=\"ts\">\nimport { defineComponent } from \"vue\";\nexport default defineComponent({\n  name: \"FMultiSelect\",\n  inheritAttrs: false,\n});\n</script>\n<script lang=\"ts\" setup>\nimport { computed, ref } from \"vue\";\nimport type { IField } from \"@/components/LForm\";\nimport type { ISelectModel } from \"@/components/LMultiSelect\";\n\nimport {\n  LMultiSelect,\n  LMultiSelectButton,\n  LMultiSelectSearch,\n  LMultiSelectList,\n  LMultiSelectGroup,\n  LMultiSelectOptions,\n  LMultiSelectOption,\n} from \"@/components/LMultiSelect\";\n\nimport {\n  iChevronDown,\n  iCheck,\n  iDash,\n  // iClose\n} from \"@/stories/composable/useIcon\";\n\nimport { LSpinner } from \"@/components/LSpinner\";\nimport { LIcon } from \"@/components/LIcon\";\n\nimport { ripple } from \"@/directives/ripple\";\nconst vRipple = ripple;\n\nconst props = withDefaults(\n  defineProps<{\n    /**\n     * modelValue - model string\n     */\n    modelValue: ISelectModel;\n    error?: string;\n    /**\n     * Schema for field.\n     */\n    field: IField;\n    required?: boolean;\n  }>(),\n  {\n    // modelValue: () => [],\n  }\n);\n\nconst emit = defineEmits([\n  \"update:modelValue\",\n  \"on-input\",\n  \"on-load-items\",\n  \"on-choose\",\n  \"on-choose-group\",\n]);\n\nconst model = computed<ISelectModel>({\n  get() {\n    return props.modelValue;\n  },\n  set(value) {\n    emit(\"update:modelValue\", value);\n  },\n});\n\nconst empty = computed<boolean>(() => {\n  let empty = true;\n  switch (typeof model.value) {\n    case \"string\":\n      empty = model.value == \"\";\n      break;\n    case \"number\":\n      empty = model.value == 0;\n      break;\n    default:\n      if (Array.isArray(model.value)) {\n        empty = model.value.length == 0;\n      }\n      break;\n  }\n  return empty;\n});\n\nconst inputElement = ref<InstanceType<typeof LMultiSelectButton> | null>(null);\n\nconst onSetFocus = () => {\n  const el = inputElement.value?.$el;\n  if (el) el.click();\n};\n\nconst onReset = async () => {\n  let newValue: ISelectModel = 0;\n  switch (typeof model.value) {\n    case \"string\":\n      newValue = \"\";\n      break;\n    default:\n      newValue = [];\n      break;\n  }\n  model.value = newValue;\n  await emit(\"on-input\");\n  await onSetFocus();\n};\n\nconst showList = ref(false);\n</script>\n<template>\n  <slot\n    name=\"label\"\n    :id=\"field.id\"\n    :required=\"required\"\n    :onSetFocus=\"onSetFocus\"\n  ></slot>\n  <div\n    class=\"flex items-center\"\n    :class=\"[\n      'rounded-md border text-base transition w-full appearance-none outline-none focus-within:ring-1 hover:ring-1  bg-white dark:bg-s-900',\n      {\n        'border-d-500 dark:border-d-500 focus-within:ring-d-500 focus-within:border-d-500 hover:ring-d-500':\n          error,\n      },\n      showList ? '' : '',\n      {\n        'border-s-200 dark:border-s-600 focus-within:ring-p-500 focus-within:border-p-500  hover:ring-p-500 hover:border-p-500':\n          !error,\n      },\n    ]\"\n  >\n    <slot name=\"before\"></slot>\n    <LMultiSelect\n      v-bind=\"$attrs\"\n      v-model=\"model\"\n      v-model:showList=\"showList\"\n      :field=\"field\"\n      :error=\"error\"\n      class=\"relative flex-auto\"\n      #default=\"{ show, loading, selectedOptions }\"\n      @on-load-items=\"$emit('on-load-items', $event)\"\n      @on-input=\"$emit('on-input', $event)\"\n      @on-choose=\"$emit('on-choose', $event)\"\n      @on-choose-group=\"$emit('on-choose-group', $event)\"\n    >\n      <LMultiSelectButton\n        ref=\"inputElement\"\n        :class=\"['outline-none flex space-x-2 items-center w-full transition']\"\n      >\n        <div class=\"flex-auto flex flex-wrap m-1\">\n          <LMultiSelectList\n            v-for=\"option in selectedOptions\"\n            :key=\"option.name\"\n            #default=\"{ removeOption }\"\n          >\n            <slot\n              name=\"selected-item\"\n              :option=\"option\"\n              :removeOption=\"removeOption\"\n            >\n              <div\n                class=\"m-0.5 rounded-md py-1 leading-5 bg-s-200 dark:bg-s-600 flex items-center\"\n              >\n                <!-- <img\n                  :src=\"'https://picsum.photos/id/' + option.id + '/200/300'\"\n                  class=\"mr-2 rounded-l-md h-8 w-8\"\n                  alt=\"\"\n                /> -->\n                <span class=\"block flex-auto px-1\">\n                  {{ field.keyLabel ? option[field.keyLabel] : option }}\n                </span>\n                <!-- <span class=\"p-1\" @click.stop=\"removeOption(option)\">\n                  <LIcon>\n                    {{ iClose }}\n                  </LIcon>\n                </span> -->\n              </div>\n            </slot>\n          </LMultiSelectList>\n          <LMultiSelectSearch\n            v-if=\"\n              field.keyFilter &&\n              ((!selectedOptions.length && !field.multiple) || field.multiple)\n            \"\n            class=\"px-2 py-1 cursor-text outline-none bg-transparent placeholder-s-400\"\n          >\n          </LMultiSelectSearch>\n          <div\n            v-if=\"!field.keyFilter && !selectedOptions.length\"\n            class=\"p-1 text-s-500 dark:text-s-400\"\n          >\n            {{ field.placeholder }}\n          </div>\n        </div>\n        <div class=\"py-2 pr-2\">\n          <LSpinner v-if=\"loading\" />\n          <LIcon\n            v-else\n            :class=\"['transition-transform', { 'rotate-180': show }]\"\n          >\n            {{ iChevronDown }}\n          </LIcon>\n        </div>\n      </LMultiSelectButton>\n      <div class=\"absolute right-8 top-0 h-full flex items-center\">\n        <slot name=\"after\" :on-reset=\"onReset\" :empty=\"empty\"></slot>\n      </div>\n      <div\n        class=\"z-10 mt-1.5 transition shadow-2xl outline-none border border-s-200 dark:border-s-700 rounded-md absolute top-full left-0 right-0 bg-white dark:bg-s-800\"\n        :class=\"[\n          show ? 'block' : 'hidden',\n          error ? '' : '',\n          {\n            'border-d-500 dark:border-d-500 focus-within:ring-d-500 focus-within:border-d-500':\n              error,\n          },\n          showList ? '' : '',\n          {\n            'border-s-200 dark:border-s-600 focus-within:ring-p-500 focus-within:border-p-500':\n              !error,\n          },\n        ]\"\n      >\n        <!-- <div\n          class=\"bg-white dark:bg-s-800 border-b border-s-200 dark:border-s-700\"\n        >\n          <LMultiSelectSearch\n            v-if=\"field.keyFilter\"\n            class=\"ml-4 p-2 outline-none bg-transparent\"\n            #default=\"{ ref, value, onInput, placeholder }\"\n          >\n            <input\n              :ref=\"(el) => (ref.value = el)\"\n              :value=\"value\"\n              :placeholder=\"placeholder\"\n              class=\"outline-none px-2 py-1\"\n              @input=\"onInput\"\n            />\n          </LMultiSelectSearch>\n        </div> -->\n        <div v-if=\"error\" class=\"p-2\">\n          <slot name=\"error\" :error=\"error\"></slot>\n        </div>\n        <div class=\"shadow-inner max-h-64 b-scroll overflow-y-auto\">\n          <LMultiSelectOptions #default=\"{ groups }\">\n            <LMultiSelectGroup\n              v-for=\"group in groups\"\n              :key=\"group.key\"\n              :group=\"group.key\"\n              #default=\"{ options, groupSelectedOption, groupLength }\"\n            >\n              <div\n                v-if=\"group.key !== 'default'\"\n                class=\"flex p-2 font-bold cursor-pointer bg-s-100 dark:bg-s-900\"\n              >\n                <div\n                  :class=\"[\n                    'flex items-center border rounded-md h-6 w-6 mr-2 border-s-200 dark:border-s-700 text-xl text-p-500',\n                  ]\"\n                >\n                  <LIcon v-if=\"groupSelectedOption == groupLength\">\n                    {{ iCheck }}\n                  </LIcon>\n\n                  <LIcon\n                    v-if=\"\n                      groupSelectedOption < groupLength &&\n                      groupSelectedOption != 0\n                    \"\n                  >\n                    {{ iDash }}\n                  </LIcon>\n                </div>\n                {{ group.key }}\n              </div>\n              <LMultiSelectOption\n                v-for=\"option of options\"\n                :key=\"field.keyValue ? option[field.keyValue] : option\"\n                :value=\"option\"\n                class=\"group relative overflow-hidden focus:outline-none cursor-pointer\"\n                #default=\"{ selected, hovered }\"\n              >\n                <slot\n                  name=\"option\"\n                  :option=\"option\"\n                  :selected=\"selected\"\n                  :hovered=\"hovered\"\n                >\n                  <div\n                    v-ripple=\"{}\"\n                    :class=\"[\n                      'flex p-2 items-center cursor-pointer focus:outline-none',\n                      hovered\n                        ? 'bg-p-200 dark:bg-p-800 text-black dark:text-white group-focus:bg-p-200 group-hover:bg-p-200 dark:group-hover:bg-p-800 dark:group-focus:bg-p-800'\n                        : 'bg-transparent text-black dark:text-white group-focus:bg-p-100 group-hover:bg-p-100 dark:group-hover:bg-p-900 dark:group-focus:bg-p-900',\n                    ]\"\n                  >\n                    <div\n                      :class=\"[\n                        'flex items-center border rounded-md h-6 w-6 mr-2',\n                        selected || hovered\n                          ? 'border-transparent'\n                          : 'border-s-200 dark:border-s-700',\n                      ]\"\n                    >\n                      <LIcon\n                        v-if=\"selected\"\n                        :class=\"[\n                          'text-xl',\n                          {\n                            'text-p-500 dark:text-p-500': selected,\n                          },\n                        ]\"\n                      >\n                        {{ iCheck }}\n                      </LIcon>\n                    </div>\n                    <!-- <img\n                      :src=\"\n                        'https://picsum.photos/id/' + option.id + '/200/300'\n                      \"\n                      class=\"mr-2 rounded-full h-6 w-6\"\n                      alt=\"\"\n                    /> -->\n                    {{ field.keyLabel ? option[field.keyLabel] : option }}\n                  </div>\n                </slot>\n              </LMultiSelectOption>\n            </LMultiSelectGroup>\n          </LMultiSelectOptions>\n        </div>\n      </div>\n      <!-- <pre>\n        {{ select.focusOption }}\n      </pre> -->\n    </LMultiSelect>\n  </div>\n  <slot name=\"error\" :error=\"error\"></slot>\n  <slot name=\"description\"></slot>\n</template>\n"],"names":["SelectContext","LMultiSelect","defineComponent","props","emit","slots","expose","close","__name","e","el","_a","select","_b","_c","show","unRegisterOverlay","registerOverlay","searchEl","ref","optionsEl","selectButtonEl","listBoxEl","field","indexShiftFrom","indexShiftTo","pressShift","searchQuery","disabled","loading","filterText","focusOption","watch","val","groupkey","model","computed","value","newValue","filteredOptions","allOptions","result","keyFilter","x","b","selectedOptions","keyValue","groups","_group","y","chooseItemsOfRange","range","from","to","chooseItems","onChooseOption","option","index","onChooseGroup","group","length","selected","allOptionsOfGroup","onChangeActiveIndex","newIndex","onSetFocus","firstValue","nextTick","elForFocus","provide","loadData","onMounted","h","LMultiSelectButton","inject","aria","propsType","withModifiers","LMultiSelectList","removeOption","item","indexValue","removeLast","Fragment","LMultiSelectSearch","searchDebounce","onSearch","LMultiSelectOptions","useId","toggleChooseAll","allSelectedOptions","LMultiSelectGroup","id","currentGroup","options","groupSelect","LMultiSelectOption","optionEl","key","onUnmounted","hovered","isHovered","__default__","vRipple","ripple","empty","inputElement","onReset","showList"],"mappings":"okBA4GO,MAAMA,EAAgB,OAC3B,eACF,EAEaC,GAAeC,EAAgB,CAC1C,KAAM,eACN,MAAO,CACL,WAAY,CACV,KAAM,CAAC,MAAO,OAAQ,MAAM,EAC5B,QAAS,IACA,EAEX,EACA,UAAW,CACT,KAAM,QACN,QAAS,EACX,EACA,MAAO,CACL,KAAM,OACN,SAAU,GACV,QAAS,KACA,GAEX,CACF,EACA,MAAO,CACL,kBACA,oBACA,cACA,WACA,YACA,iBACF,EACA,MAAMC,EAAO,CAAE,KAAAC,EAAM,MAAAC,EAAO,OAAAC,GAAU,CAC9B,MAAAC,EAAQC,EAACC,GAAa,WAC1B,MAAMC,EAAKD,EAAE,OAEX,GAACE,EAAAC,EAAO,eAAe,QAAtB,MAAAD,EAA6B,SAASD,KACvC,GAACG,EAAAD,EAAO,UAAU,QAAjB,MAAAC,EAAwB,SAASH,KAClC,GAACI,EAAAF,EAAO,SAAS,QAAhB,MAAAE,EAAuB,SAASJ,MAEjCK,EAAK,MAAQ,GACKC,IAEpB,EAVY,SAaRA,EAAoBR,EAAA,IAAM,CACrB,SAAA,oBAAoB,QAASD,CAAK,EAClC,SAAA,oBAAoB,QAASA,CAAK,CAAA,EAFnB,qBAKpBU,EAAkBT,EAAA,IAAM,CACnB,SAAA,iBAAiB,QAASD,CAAK,EAC/B,SAAA,iBAAiB,QAASA,CAAK,CAAA,EAFlB,mBAKlBW,EAAWC,EAA0C,IAAI,EACzDC,EAAYD,EAA2C,CAAA,CAAE,EAGzDE,EACJF,EAAgD,IAAI,EAChDG,EAAYH,EAA2C,IAAI,EAC3DI,EAAQJ,EAAuChB,EAAM,KAAK,EAC1DqB,EAAiBL,EAAI,CAAC,EACtBM,EAAeN,EAAI,CAAC,EACpBO,EAAaP,EAAI,EAAK,EACtBQ,EAAcR,EAAI,EAAE,EACpBJ,EAAOI,EAAI,EAAK,EAChBS,EAAWT,EAAI,EAAK,EACpBU,EAAUV,EAAI,EAAK,EACnBW,EAAaX,EAAI,EAAE,EACnBY,EAAcZ,EAAI,CAAC,EAEzBa,GACE,IAAMjB,EAAK,MACVkB,GAAQ,CACP7B,EAAK,kBAAmB6B,CAAG,CAC7B,CAAA,EAGI,MAAAC,EAAWX,EAAM,MAAM,UAAY,OAEnCY,EAAQC,EAAS,CACrB,KAAM,CACJ,OAAOjC,EAAM,MAAM,UAAY,MAAM,QAAQA,EAAM,UAAU,EACzD,CAAC,GAAGA,EAAM,UAAU,EACpBA,EAAM,WACN,CAACA,EAAM,UAAU,EACjB,EACN,EACA,IAAIkC,EAAO,CACT,MAAMC,EAAWf,EAAM,MAAM,SAAWc,EAAQA,EAAM,GACtDjC,EAAK,oBAAqBkC,CAAQ,EAAGlC,EAAK,WAAYkC,CAAQ,CAChE,CAAA,CACD,EAEKC,EAAkBH,EAAS,IAAM,CAGrC,MAAMI,EAAajB,EAAM,MAAM,OAAS,CAAA,EACxC,IAAIkB,EAAwBD,EACtB,MAAAE,EAAYnB,EAAM,MAAM,UAC9B,OAAImB,IACFD,EAASD,EACN,OAAQG,GACP,OAAOA,GAAK,SACRA,EAAED,GACC,YAAA,EACA,QAAQZ,EAAW,MAAM,YAAa,CAAA,IAAM,GAC/C,OAAOa,GAAK,SACZA,IAAM,GACNA,EAAE,cAAc,QAAQb,EAAW,MAAM,YAAa,CAAA,IAAM,EAAA,EAEjE,KACC,CAAC,EAAQc,IACPhC,EAAO,MAAM,MAAM,QAAQ,EAAE8B,EAAU,EACvC9B,EAAO,MAAM,MAAM,QAAQgC,EAAEF,EAAU,CAAA,GAIxCD,CAAA,CACR,EAIKI,EAAkBT,EAAS,IAAM,CACrC,MAAMI,EAAajB,EAAM,MAAM,OAAS,CAAA,EAClCuB,EAAWvB,EAAM,MAAM,SAC7B,IAAIkB,EAAwB,CAAA,EAC5B,OAAAA,EAASD,EACN,OAAQG,GACP/B,EAAO,MAAM,MAAM,SACjB,OAAO+B,GAAK,UAAYG,EAAWH,EAAEG,GAAYH,CACnD,CAAA,EAED,KACC,CAAC,EAAGC,IACFhC,EAAO,MAAM,MAAM,QAAQ,EAAEkC,EAAS,EACtClC,EAAO,MAAM,MAAM,QAAQgC,EAAEE,EAAS,CAAA,EAErCL,CAAA,CACR,EAEKM,GAASX,EAAS,IAAM,SAE5B,MAAMW,EAAkB,CAAA,EACxB,OAAKb,IACHa,EAAO,QAAa,CAClB,SAAUF,EAAgB,MAAM,QAAU,EAC1C,SAAQlC,EAAAY,EAAM,MAAM,QAAZ,YAAAZ,EAAmB,SAAU,EACrC,IAAK,SAAA,GAGLuB,KACFrB,EAAA0B,EAAgB,MACb,KAAK,CAAC,EAAGK,IACR,OAAO,EAAEV,IAAa,SAClB,EAAEA,GAAU,cAAcU,EAAEV,EAAS,EACrC,EAAIU,CAAA,IAJZ,MAAA/B,EAMI,QAAS8B,GAAM,CAEX,IAAAK,EACF,OAAOL,EAAET,IAAa,SAClBS,EAAET,GACFS,EAAET,GAAU,SAAS,EACvB,OAAOS,GAAK,WACdI,EAAOC,GAAU,CACf,SAAUH,EAAgB,MAAM,OAC7BI,GAAM,OAAOA,GAAK,UAAYA,EAAEf,IAAac,CAAA,EAC9C,OACF,OAAQD,EAAOC,GAAUD,EAAOC,GAAQ,OAAS,EAAI,EACrD,IAAKA,CAAA,EAET,IAGCD,CAAA,CACR,EAEMzC,EAAA,CACL,SAAUe,CAAA,CACX,EAED,MAAM6B,GAAqB1C,EAAA,CAAC,CAAE,MAAA2C,KAA+B,CAEvD,GAAA,CAAC5B,EAAM,MAAM,SAEf,OAII,KAAA,CAAE,KAAA6B,EAAM,GAAAC,CAAO,EAAAF,EACjB,GAAA,CAAC5B,EAAM,MAAM,MACf,OAGI,MAAA+B,EAAc/B,EAAM,MAAM,MAAM,MACpC6B,EAAOC,EAAKD,EAAOC,EACnBA,EAAKD,EAAOC,EAAK,EAAID,EAAO,CAAA,EAEvBxC,EAAA,MAAM,MAAQ,KAAK,MACxB,KAAK,UACH0C,EAAY,IAAKX,GACfpB,EAAM,MAAM,UAAY,OAAOoB,GAAK,SAChCA,EAAEpB,EAAM,MAAM,UACdoB,CACN,CACF,CAAA,CACF,EAzByB,sBAoCrBY,GAAiB/C,EAACgD,GAAyB,CACzC,MAAAnB,EAAQzB,GAAA,MAAAA,EAAQ,MAAM,MAAM,SAC9B4C,EAAO5C,EAAO,MAAM,MAAM,UAC1B4C,EACEC,EAAQ7C,EAAO,MAAM,MAAM,UAC9B+B,GAAuBA,IAAMN,CAAA,EAEhC,IAAIC,EAAgC,CAAC,GAAG1B,EAAO,MAAM,KAAK,EACtDA,EAAO,MAAM,MAAM,SACjB6C,IAAU,GACHnB,EAAA,OAAOmB,EAAO,CAAC,EAExBnB,EAAS,KAAKD,CAAK,EAGrBC,EAAW,CAACD,CAAK,EAEnBjC,EAAK,YAAaoD,CAAM,EACxB5C,EAAO,MAAM,MAAQ0B,CAAA,EAlBA,kBAwBjBoB,GAAgBlD,EAACmD,GAAmB,CAExC,GADA,QAAQ,KAAK,aAAa,EACtB,EAAC/C,GAAA,MAAAA,EAAQ,MAAM,MAAM,UACvB,OAEI,KAAA,CAAE,OAAAgD,EAAQ,SAAAC,CAAa,EAAAF,EACvBG,EAAoBlD,EAAO,MAAM,MAAM,MAC1C,OAAQ+B,GACP/B,EAAO,SAAW+B,EAAE/B,EAAO,YAAc+C,EAAM,IAAM,EAAA,EAEtD,IAAKhB,GACJ/B,EAAO,MAAM,MAAM,SAAW+B,EAAE/B,EAAO,MAAM,MAAM,UAAY+B,CAAA,EAEnEvC,EAAK,kBAAmB0D,CAAiB,EAEzC,MAAMxB,EACJsB,IAAWC,EACPjD,EAAO,MAAM,MAAM,OAAOkD,CAAiB,EAC3ClD,EAAO,MAAM,MAAM,OAAQ+B,GAAMmB,EAAkB,QAAQnB,CAAC,EAAI,CAAC,EACvE/B,EAAO,MAAM,MAAQ0B,EACrB,QAAQ,QAAQ,aAAa,CAAA,EApBT,iBA4BhByB,GAAsBvD,EAACC,GAAqB,CAC5C,IAAAuD,EAAWpD,EAAO,YAAY,OAAS,EAEvC,OAAAA,EAAO,YAAY,OAAS,KACnBoD,EAAA,GAETvD,EAAE,MAAQ,YACZuD,IAESvD,EAAE,MAAQ,WACnBuD,IAGEA,EAAWpD,EAAO,UAAU,MAAM,OAAS,IAClCoD,EAAApD,EAAO,UAAU,MAAM,OAAS,GAEzCoD,EAAW,IACFA,EAAA,GAINA,CAAA,EArBmB,uBAyBtBC,GAAazD,EAAA,IAAM,CAClBI,EAAO,YAAY,QACtBA,EAAO,YAAY,MAAQ,GAMvB,MAAAsD,EAAatD,EAAO,MAAM,MAAM,SAClCA,EAAO,MAAM,MAAM,GACnBA,EAAO,MAAM,MAGXkC,EAAWlC,EAAO,MAAM,MAAM,SAC9B6C,EAAQ7C,EAAO,gBAAgB,MAAM,UAAW+B,GACpDG,GAAY,OAAOH,GAAK,SACpBA,EAAEG,IAAaoB,EACfvB,GAAKuB,CAAA,EAEPT,GAASA,GAAS,KACpB7C,EAAO,YAAY,MAAQ6C,GAS7BU,EAAS,IAAM,OACb,MAAM9B,EAAQzB,EAAO,gBAAgB,MAAMA,EAAO,YAAY,OACxDwD,EAAaxD,EAAO,UAAU,MAAM,KACvC+B,IAAMA,GAAE,OAASG,EAAWT,EAAMS,GAAYT,EAAA,EAE7C+B,EAAW,MAEbzD,EAAAyD,EAAW,KAAX,MAAAzD,EAAe,QACjB,CACD,CAAA,EAtCgB,cAgDbC,EAAS,CACb,GAAIT,EAAM,MAAM,KAChB,eAAAkB,EACA,UAAAC,EACA,SAAAJ,EAEA,UAAAE,EAGA,YAAAW,EACA,MAAAI,EACA,MAAAZ,EACA,KAAAR,EAEA,QAAAc,EACA,SAAAD,EAEA,OAAAmB,GACA,SAAAb,EAKA,gBAAAW,EAEA,gBAAAN,EACA,WAAAT,EAEA,YAAAH,EACA,kBAAmB,CACbA,EAAY,QAAU,KAE1BA,EAAY,MAAQ,GACtB,EAEA,WAAAD,EACA,eAAAF,EACA,aAAAC,EAEA,gBAAAR,EACA,kBAAAD,EACA,mBAAAkC,GACA,YAAa,IAAM9C,EAAK,aAAa,EACrC,YAAc6B,GAAsB,CAClC7B,EAAK,oBAAqB6B,CAAG,EAAG7B,EAAK,WAAY6B,CAAG,CACtD,EAEA,oBAAA8B,GACA,eAAAR,GACA,cAAAG,GACA,WAAAO,EAAA,EAGFI,GAAQrE,EAAeY,CAAM,EAE7B,MAAM0D,GAAW9D,EAAA,SAAY,CAC3BqB,EAAQ,MAAQ,GAChBD,EAAS,MAAQ,GACjB,MAAMxB,EAAK,aAAa,EACxByB,EAAQ,MAAQ,GAChBD,EAAS,MAAQ,EAAA,EALF,YAQjB,OAAA2C,GAAU,SAAY,CACpB,MAAMD,GAAS,EACX/C,EAAM,MAAM,WACd4C,EAAS,IAAM,OACTvD,EAAO,SAAS,MACXA,EAAA,SAAS,MAAM,SAEtBD,EAAAU,EAAe,QAAf,MAAAV,EAAsB,OACxB,CACD,CACH,CACD,EAEM,IACL6D,EACE,MACA,CAKA,EACA,CACE,QAAS,IACPnE,EAAM,QACFA,EAAM,QAAQ,CACZ,OAAAO,EACA,QAASiB,EAAQ,MACjB,SAAUD,EAAS,MACnB,KAAMhB,EAAO,KAAK,MAClB,gBAAiB2B,EAAgB,MACjC,YAAa3B,EAAO,YAAY,MAChC,eAAgBA,EAAO,eAAe,MACtC,aAAcA,EAAO,aAAa,MAClC,gBAAiBA,EAAO,gBAAgB,OAAS,CAAC,CACnD,CAAA,EACD,CAAC,CACT,CAAA,CAEN,CACF,CAAC,EAEY6D,GAAqBvE,EAAgB,CAChD,KAAM,qBACN,MAAMC,EAAO,CAAE,MAAAE,GAAS,CAChB,MAAAO,EAAS8D,EAAO1E,CAAa,EACnC,GAAI,CAACY,EAAQ,CACH,QAAA,KAAK,qCAAiB,qBAAsB,cAAc,EAClE,MACF,CAEM,MAAA+D,EAAOvC,EAAS,IAAM,CAC1B,MAAMuC,EAAuB,CAAA,EACzB,OAAA/D,EAAO,KAAK,QACd+D,EAAK,iBAAmB,GAAG/D,EAAO,MAAM,MAAM,gBAEzC+D,CAAA,CACR,EAEKC,EAAYxC,EAAS,IACzBxB,EAAO,SAAS,MACZ,GACA,CACE,KAAM,SACN,KAAM,SACN,SAAU,EACV,SAAUA,EAAO,SAAS,MAC1B,gBAAiBA,EAAO,KAAK,MAC7B,gBAAiB,UACjB,kBAAmBA,EAAO,MAAM,MAAM,MAClC,GAAGA,EAAO,MAAM,MAAM,aACtB,OACJ,GAAG+D,EAAK,KACV,CAAA,EAGN,MAAO,IACLH,EACE5D,EAAO,SAAS,MAAQ,MAAQ,SAChC,CACE,IAAKA,EAAO,eACZ,GAAI,GAAGA,EAAO,YACd,GAAGgE,EAAU,MACb,QAASC,EAAc,IAAM,CAK3BjE,EAAO,KAAK,MAAQ,CAACA,EAAO,KAAK,MAC7BA,EAAO,KAAK,OACduD,EAAS,IAAM,CACbvD,EAAO,WAAW,CAAA,CACnB,EAEGA,EAAO,SAAS,OAClBuD,EAAS,IAAM,QACNxD,EAAAC,EAAA,SAAS,QAAT,MAAAD,EAAgB,OAAM,CAC9B,EAEH,WAAW,IAAM,CACfC,EAAO,gBAAgB,GACtB,EAAE,GAMLA,EAAO,kBAAkB,CAG7B,EAAG,EAAE,EACL,UAAWiE,EAAepE,GAAqB,CAC7C,OAAQA,EAAE,IAAK,CACb,IAAK,QAMIG,EAAA,eACLA,EAAO,gBAAgB,MAAMA,EAAO,YAAY,MAAA,EAE7CA,EAAO,MAAM,MAAM,UACtBuD,EAAS,IAAM,SACTvD,EAAO,SAAS,OACXD,EAAAC,EAAA,SAAS,QAAT,MAAAD,EAAgB,SAEhBE,EAAAD,EAAA,eAAe,QAAf,MAAAC,EAAsB,MAAM,CACjC,cAAe,EAAA,GAGnBD,EAAO,KAAK,MAAQ,EAAA,CACrB,EAIH,MACF,IAAK,UACL,IAAK,YACEA,EAAO,KAAK,QACfA,EAAO,KAAK,MAAQ,GAEpBA,EAAO,gBAAgB,GAErBA,EAAO,KAAK,OACdA,EAAO,oBAAoBH,CAAC,EAE9B0D,EAAS,IAAM,CACbvD,EAAO,WAAW,CAAA,CACnB,EAcD,MACF,IAAK,SACHA,EAAO,KAAK,MAAQ,GACpBA,EAAO,YAAY,MAAQ,EAC3BA,EAAO,kBAAkB,EACzB,KACJ,CAyBF,EAAG,EAAE,CAYP,EACAP,EAAM,QACFA,EAAM,QAAQ,CACZ,KAAMO,EAAO,KAAK,MAClB,SAAUA,EAAO,SAAS,MAC1B,QAASA,EAAO,QAAQ,KACzB,CAAA,EACD,CAAC,CAAA,CAEX,CACF,CAAC,EAEYkE,GAAmB5E,EAAgB,CAC9C,KAAM,mBACN,MAAMC,EAAO,CAAE,KAAAC,EAAM,MAAAC,GAAS,CACtB,MAAAO,EAAS8D,EAAO1E,CAAa,EAE7B+E,EAAevE,EAACwE,GAAS,CACvB,MAAAC,EAAarE,EAAO,MAAM,MAAM,UACnC+B,GAAcA,IAAMqC,EAAKpE,EAAO,MAAM,MAAM,WAAaoE,EAAA,EAE5D,GAAIC,IAAe,GAAI,CACrB,MAAM3C,EAAW,CAAC,GAAG1B,EAAO,MAAM,KAAK,EAC9B0B,EAAA,OAAO2C,EAAY,CAAC,EAC7BrE,EAAO,MAAM,MAAQ0B,CACvB,CAAA,EARmB,gBA6Bf4C,EAAa1E,EAAA,IAAM,CAChBI,EAAA,MAAM,MAAM,OAAOA,EAAO,MAAM,MAAM,OAAS,EAAG,CAAC,CAAA,EADzC,cAoBnB,MAAO,IACL4D,EACEW,EACA,CAAC,EACD9E,EAAM,QACFA,EAAM,QAAQ,CACZ,aAAA0E,EACA,UAAYtE,GAAM,CACZA,EAAE,MAAQ,aACDyE,GAEf,CACD,CAAA,EACD,CAAC,CAAA,CAEX,CACF,CAAC,EAUYE,GAAqBlF,EAAgB,CAChD,KAAM,qBAEN,MAAMC,EAAO,CAAE,MAAAE,GAAS,CACtB,MAAMO,EAAS8D,EAAO1E,EAAe,CAAE,CAAA,EACjCsC,EAAWnB,EAAI,EAAE,EAMjBkE,EAAiBlE,EAA0C,IAAI,EAC/DmE,EAAW9E,EAAA,IAAM,CACdI,EAAA,WAAW,MAAQ0B,EAAS,MAEnC1B,EAAO,QAAQ,MAAQ,GAElBA,EAAO,KAAK,QACfA,EAAO,KAAK,MAAQ,GACpB,WAAW,IAAM,CACfA,EAAO,gBAAgB,GACtB,EAAE,EACP,EAVe,YAajB,MAAO,WACL,OAAA4D,EACE,QACA,CACE,IAAM9D,GAAQE,EAAO,SAAS,MAAQF,EACtC,KAAM,WACN,SAAU,EACV,aAAaC,EAAAC,EAAO,MAAM,QAAb,YAAAD,EAAoB,YACjC,SAAUC,EAAO,SAAS,MAC1B,gBAAiBA,EAAO,KAAK,MAC7B,gBAAiB,UACjB,kBAAmBA,EAAO,MAAM,MAAM,MAClC,GAAGA,EAAO,MAAM,MAAM,aACtB,OACJ,gBAAiBA,EAAO,KAAK,MACzB,GAAGA,EAAO,MAAM,MAAM,eACtB,OACJ,MAAO0B,EAAS,MAChB,QAAU7B,GAAqB,CAC7B,MAAMC,EAAKD,EAAE,OACT4E,EAAe,OAAO,aAAaA,EAAe,KAAK,EAC3DzE,EAAO,QAAQ,MAAQ,GACvByE,EAAe,MAAQ,WAAW,IAAMC,IAAY,GAAG,EACvDhD,EAAS,MAAQ5B,EAAG,KACtB,CAiCF,CAAA,EAgBN,CACF,CAAC,EAEY6E,GAAsBrF,EAAgB,CACjD,KAAM,sBACN,MAAMC,EAAO,CAAE,MAAAE,GAAS,CAChB,MAAAO,EAAS8D,EAAO1E,CAAa,EACnC,GAAI,CAACY,EACH,OAGS4E,GAAM,EAEX,MAAAb,EAAOvC,EAAS,IAAM,CAC1B,MAAMuC,EAAuB,CAAA,EAC7B,OAAI/D,EAAO,YAAY,OAAS,MAAQA,EAAO,YAAY,QAAU,KACnE+D,EACE,yBACE,GAAG/D,EAAO,aAAaA,EAAO,YAAY,SAE5CA,EAAO,MAAM,MAAM,WACrB+D,EAAK,wBAA0B,IAE1BA,CAAA,CACR,EAEKc,EAAkBjF,EAAA,IAAM,SAExB,GAAA,CAACI,EAAO,MAAM,MAAM,SAAU,OAC5B,MAAAkC,EAAWlC,EAAO,MAAM,MAAM,SAGhC,GAAAA,EAAO,MAAM,MAAM,WAAWD,EAAAC,EAAO,MAAM,MAAM,QAAnB,YAAAD,EAA0B,QACnDC,EAAA,MAAM,MAAQ,OAGhB,CACL,MAAM8E,GAAqB7E,EAAAD,EAAO,MAAM,MAAM,QAAnB,YAAAC,EAA0B,IAAK8B,GACxDG,GAAY,OAAOH,GAAK,SAAWA,EAAEG,GAAYH,GAE/C+C,IAAoB9E,EAAO,MAAM,MAAQ8E,EAG/C,CAAA,EAjBsB,mBAoBlBL,EAAiBlE,EAA0C,IAAI,EAuBrE,MAAO,IACLqD,EACE,MACA,CACE,IAAK5D,EAAO,UACZ,GAAI,GAAGA,EAAO,MAAM,MAAM,eAC1B,KAAM,UACN,kBAAmB,GAAGA,EAAO,MAAM,MAAM,aACzC,SAAU,EACV,GAAG+D,EAAK,MACR,UAAWE,EACRpE,GAAqB,WAchB,GAbA4E,EAAe,OAAO,aAAaA,EAAe,KAAK,EAE3DA,EAAe,MAAQ,WACrB,IAAMzE,EAAO,iBAAiB,EAC9B,GAAA,EAIEH,EAAE,SAAWA,EAAE,MAAQ,MACTgF,IAChBhF,EAAE,eAAe,GAGfA,EAAE,MAAQ,SAAU,CACtBG,EAAO,YAAY,MAAQ,EAC3BA,EAAO,KAAK,MAAQ,GAChBA,EAAO,SAAS,OACXD,EAAAC,EAAA,SAAS,QAAT,MAAAD,EAAgB,SAEvBE,EAAAD,EAAO,eAAe,QAAtB,MAAAC,EAA6B,MAAM,CAAE,cAAe,KAEtD,MACF,CAGM,MAAAmD,EAAWpD,EAAO,oBAAoBH,CAAC,EAEzC,GADJA,EAAE,eAAe,EACbuD,IAAapD,EAAO,YAAY,MAAO,CAEzCA,EAAO,YAAY,MAAQoD,EAErB,MAAAlB,EAAWlC,EAAO,MAAM,MAAM,SAC9ByB,EAAQzB,EAAO,gBAAgB,MAAMoD,GACrCI,EAAaxD,EAAO,UAAU,MAAM,KAAM+B,GAAM,CACpD,IAAIV,EAAMI,EACN,OAAA,OAAOA,GAAS,UAAYS,IAC9Bb,EAAMI,EAAMS,IAEPH,EAAE,KAAOV,CAAA,CACjB,EACGmC,KAEFtD,EAAAsD,EAAW,KAAX,MAAAtD,EAAe,QAMnB,CACKL,EAAE,WACLG,EAAO,eAAe,MAAQoD,GAI9BvD,EAAE,WACDA,EAAE,MAAQ,aAAeA,EAAE,MAAQ,aAE7BG,EAAA,aAAa,MAAQA,EAAO,YAAY,MAC/CA,EAAO,mBAAmB,CACxB,MAAO,CACL,KAAMA,EAAO,eAAe,MAC5B,GAAIA,EAAO,aAAa,KAC1B,CAAA,CACD,EAYL,EACA,CAAC,MAAM,CACT,EACA,QAAUH,GAAqB,CACzBA,EAAE,MAAQ,UACZG,EAAO,WAAW,MAAQ,GAC1BA,EAAO,eAAe,MAAQ,EAC9BA,EAAO,aAAa,MAAQ,EAEhC,EACA,QAAS,IAAM,CAAC,CAClB,EACAP,EAAM,QACFA,EAAM,QAAQ,CACZ,OAAQO,GAAA,YAAAA,EAAQ,OAAO,MACvB,QAASA,GAAA,YAAAA,EAAQ,gBAAgB,KAClC,CAAA,EACD,CAAC,CAAA,CAEX,CACF,CAAC,EAEY+E,GAAoBzF,EAAgB,CAC/C,KAAM,oBACN,MAAO,CACL,MAAO,CACL,KAAM,CAAC,OAAQ,MAAM,EACrB,QAAS,UACT,SAAU,EACZ,CACF,EACA,MAAMC,EAAO,CAAE,MAAAE,EAAO,KAAAD,GAAQ,CACtB,MAAAQ,EAAS8D,EAAO1E,CAAa,EACnC,GAAI,CAACY,EACH,OAGF,MAAMgF,EAAKJ,KAELK,EAAezD,EAAS,IAAMxB,EAAO,OAAO,MAAMT,EAAM,MAAM,EAK9D2F,EAAU1D,EAAS,IAAM,CACvB,MAAAI,EAAa5B,EAAO,MAAM,MAAM,UAClCA,EAAO,gBAAgB,MACvBA,EAAO,MAAM,MAAM,MAChB,OAAAA,EAAO,SACV4B,EAAW,OAAQG,GAAMA,EAAE/B,EAAO,YAAcT,EAAM,KAAK,EAC3DqC,CAAA,CACL,EAEKuD,EAAc3D,EAClB,IAAMyD,EAAa,MAAM,WAAaA,EAAa,MAAM,MAAA,EAG3D,MAAO,IACLrB,EACE,MACA,CAEE,GAAI,GAAG5D,GAAA,YAAAA,EAAQ,YAAYgF,IAC3B,KAAM,QACN,gBAAiB,GAGjB,QAASf,EAAc,IAAM,CACpBjE,EAAA,cAAciF,EAAa,KAAK,CAAA,EACtC,CAAC,MAAM,CAAC,CACb,EACAxF,EAAM,QACFA,EAAM,QAAQ,CACZ,QAASuF,EACT,QAASE,EAAQ,MACjB,oBAAqBD,EAAa,MAAM,SACxC,YAAaA,EAAa,MAAM,OAChC,YAAaE,EAAY,KAC1B,CAAA,EACD,CAAC,CAAA,CAEX,CACF,CAAC,EAEYC,GAAqB9F,EAAgB,CAChD,KAAM,qBACN,MAAO,CAML,MAAO,CACL,KAAM,CAAC,OAAQ,OAAQ,MAAM,EAC7B,QAAS,EACX,CACF,EACA,MAAMC,EAAO,CAAE,MAAAE,GAAS,CAChB,MAAAO,EAAS8D,EAAO1E,CAAa,EAC7BiG,EAAW9E,EAAiB,IAAI,EAChC+E,EAAM9D,EAAS,IACnBxB,EAAO,MAAM,MAAM,SACfT,EAAM,MAAMS,EAAO,MAAM,MAAM,UAC/BT,EAAM,KAAA,EAGZoE,GAAU,IAAM,CACP3D,EAAA,UAAU,MAAM,KAAK,CAC1B,IAAKsF,EAAI,MACT,GAAID,EAAS,KAAA,CACd,CAAA,CAGF,EAED,MAAML,EAAKJ,KACL/B,EAAQrB,EAAS,IACrBxB,EAAO,UAAU,MAAM,UAAW+B,GAAMA,EAAE,KAAOuD,EAAI,KAAK,CAAA,EAG5DC,GAAY,IAAM,CAGhBvF,GAAA,MAAAA,EAAQ,UAAU,MAAM,OAAO6C,EAAM,MAAO,EAAC,CAC9C,EAEK,MAAAI,EAAWzB,EAAS,IAEjBxB,EAAO,MAAM,MAAM,SACxBA,EAAO,MAAM,MAAM,SACfT,EAAM,MAAMS,EAAO,MAAM,MAAM,UAC/BT,EAAM,KAAA,CAEb,EACKiG,EAAUhE,EAAS,IAAM,CAEvB,MAAAU,EAAWlC,EAAO,MAAM,MAAM,SAC9ByB,EAAQzB,EAAO,gBAAgB,MAAMA,EAAO,YAAY,OAC9D,IAAIyF,EAAY,GAChB,OAAIhE,IAECgE,GAAAvD,EAAW3C,EAAM,MAAM2C,GAAY3C,EAAM,SACzC2C,EAAWT,EAAMS,GAAYT,IAE3BgE,CAAA,CAMR,EAUD,MAAO,IACL7B,EACE,MACA,CACE,IAAKyB,EACL,GAAI,GAAGrF,EAAO,aAAagF,IAC3B,KAAM,SACN,gBAAiB,GACjB,SAAU,GACV,gBAAiB/B,EAAS,QAAU,GAAOA,EAAS,MAAQ,OAC5D,QAAS,IAAM,CAIf,EACA,UAAYpD,GAAqB,SAc3BA,EAAE,MAAQ,UACLG,EAAA,eAAeT,EAAM,KAAK,EAC5BS,EAAO,MAAM,MAAM,WACtBA,EAAO,KAAK,MAAQ,GAEhBA,EAAO,SAAS,OACXD,EAAAC,EAAA,SAAS,QAAT,MAAAD,EAAgB,SAEhBE,EAAAD,EAAA,eAAe,QAAf,MAAAC,EAAsB,MAAM,CACjC,cAAe,EAAA,GAGnBJ,EAAE,eAAe,GAGvB,EACA,aAAeA,GAAM,CAGZG,EAAA,YAAY,MAAQ6C,EAAM,MAC5BhD,EAAE,SAGLG,EAAO,aAAa,MAAQA,EAAO,YAAY,MAAQ,EAFhDA,EAAA,eAAe,MAAQA,EAAO,YAAY,KAIrD,EACA,aAAeH,GAAM,CAGnBG,EAAO,YAAY,MAAQ,KACtBH,EAAE,WACLG,EAAO,eAAe,MAAQ,EAElC,EACA,QAASiE,EACNpE,GAAM,CAEDA,EAAE,SACJG,EAAO,mBAAmB,CACxB,MAAO,CACL,KAAMA,EAAO,eAAe,MAC5B,GAAIA,EAAO,aAAa,KAC1B,CAAA,CACD,GAEOA,GAAA,MAAAA,EAAA,eAAeT,EAAM,OACxBS,EAAO,MAAM,MAAM,WACtBA,EAAO,eAAe,MAAM,MAAM,CAAE,cAAe,GAAM,EACzDA,EAAO,KAAK,MAAQ,GACpBH,EAAE,eAAe,GAGnB0D,EAAS,IAAM,OACTvD,GAAA,MAAAA,EAAQ,SAAS,SACXD,EAAAC,GAAA,YAAAA,EAAA,SAAS,QAAT,MAAAD,EAAgB,QACxBF,EAAE,eAAe,EACnB,CACD,EAEL,EACA,CAAC,MAAM,CACT,CACF,EACAJ,EAAM,QACFA,EAAM,QAAQ,CAEZ,SAAUuF,EACV,SAAU/B,EAAS,MACnB,QAASuC,EAAQ,MACjB,QAASxF,GAAA,YAAAA,EAAQ,YAAY,KAC9B,CAAA,EACD,CAAC,CAAA,CAEX,CACF,CAAC,8jBCnzCD0F,GAAepG,EAAgB,CAC7B,KAAM,eACN,aAAc,EAChB,CAAC,qMA4BKqG,EAAUC,GA4BVrE,EAAQC,EAAuB,CACnC,KAAM,CACJ,OAAOjC,EAAM,UACf,EACA,IAAIkC,EAAO,CACTjC,EAAK,oBAAqBiC,CAAK,CACjC,CAAA,CACD,EAEKoE,EAAQrE,EAAkB,IAAM,CACpC,IAAIqE,EAAQ,GACJ,OAAA,OAAOtE,EAAM,MAAO,CAC1B,IAAK,SACHsE,EAAQtE,EAAM,OAAS,GACvB,MACF,IAAK,SACHsE,EAAQtE,EAAM,OAAS,EACvB,MACF,QACM,MAAM,QAAQA,EAAM,KAAK,IAC3BsE,EAAQtE,EAAM,MAAM,QAAU,GAEhC,KACJ,CACOsE,OAAAA,CAAA,CACR,EAEKC,EAAevF,EAAoD,IAAI,EAEvE8C,EAAazD,EAAA,IAAM,OACjB,MAAAE,GAAKC,EAAA+F,EAAa,QAAb,YAAA/F,EAAoB,IAC3BD,GAAIA,EAAG,MAAM,CAAA,EAFA,cAKbiG,EAAUnG,EAAA,SAAY,CAC1B,IAAI8B,EAAyB,EACrB,OAAA,OAAOH,EAAM,MAAO,CAC1B,IAAK,SACQG,EAAA,GACX,MACF,QACEA,EAAW,CAAA,EACX,KACJ,CACAH,EAAM,MAAQG,EACd,MAAMlC,EAAK,UAAU,EACrB,MAAM6D,EAAW,CAAA,EAZH,WAeV2C,EAAWzF,EAAI,EAAK"}